<?xml version="1.0" encoding="utf-8"?>
<html>
  <head>
    <meta charset="UTF-8"/>
    <title>doc &ndash; Vala Binding Reference</title>
    <link href="../style.css" rel="stylesheet" type="text/css"/><script src="../scripts.js" type="text/javascript">
    </script>
  </head>
  <body>
    <div class="site_header">doc Reference Manual</div>
    <div class="site_body">
      <div class="site_navigation">
        <ul class="navi_main">
          <li class="package_index"><a href="../index.html">Packages</a></li>
        </ul>
        <hr class="navi_hr"/>
        <ul class="navi_main">
          <li class="package">doc</li>
        </ul>
        <hr class="navi_hr"/>
        <ul class="navi_main">
          <li class="namespace"><a href="Cogl.html">Cogl</a></li>
          <li class="namespace"><a href="CoglGst.html">CoglGst</a></li>
          <li class="namespace"><a href="CoglPango.html">CoglPango</a></li>
        </ul>
      </div>
      <div class="site_content">
        <h1 class="main_title" id="doc">doc</h1>
        <hr class="main_hr"/>
        <h2 class="main_title">Description:</h2>
        <h2 class="main_title">Content:</h2>
        <h3 class="main_title">Namespaces:</h3>
        <ul class="navi_inline">
          <li class="namespace"><a href="Cogl.html">Cogl</a> - </li>
          <h3 class="main_title">Interfaces:</h3>
          <ul class="navi_inline">
            <li class="interface"><a href="Cogl.Framebuffer.html">Framebuffer</a> - </li>
            <li class="interface"><a href="Cogl.Texture.html">Texture</a> - </li>
          </ul>
          <h3 class="main_title">Classes:</h3>
          <ul class="navi_inline">
            <li class="class"><a href="Cogl.AtlasTexture.html">AtlasTexture</a> - </li>
            <li class="class"><a href="Cogl.Attribute.html">Attribute</a> - </li>
            <li class="class"><a href="Cogl.AttributeBuffer.html">AttributeBuffer</a> - </li>
            <li class="class"><a href="Cogl.Bitmap.html">Bitmap</a> - </li>
            <li class="class"><a href="Cogl.Color.html">Color</a> - <span class="brief_description">A structure for holding a color definition.</span>
            </li>
            <li class="class"><a href="Cogl.Context.html">Context</a> - </li>
            <li class="class"><a href="Cogl.Display.html">Display</a> - </li>
            <li class="class"><a href="Cogl.Euler.html">Euler</a> - <span class="brief_description">Represents an ordered rotation first of <code>
                  heading</code> degrees around an object's y axis, then <code>pitch</code> degrees around an object's x axis and finally <code>roll
                </code> degrees around an object's z axis.</span></li>
            <li class="class"><a href="Cogl.Fence.html">Fence</a> - <span class="brief_description">An opaque object representing a fence.</span></li>
            <li class="class"><a href="Cogl.FenceClosure.html">FenceClosure</a> - <span class="brief_description">An opaque type representing one 
                future callback to be made when the GPU command stream has passed a certain point.</span></li>
            <li class="class"><a href="Cogl.Fixed.html">Fixed</a> - </li>
            <li class="class"><a href="Cogl.FrameClosure.html">FrameClosure</a> - <span class="brief_description">An opaque type that tracks a 
                <a href="Cogl.FrameCallback.html" class="delegate">FrameCallback</a> and associated user data.</span></li>
            <li class="class"><a href="Cogl.FrameInfo.html">FrameInfo</a> - </li>
            <li class="class"><a href="Cogl.GLES2Context.html">GLES2Context</a> - <span class="brief_description">Represents an OpenGLES 2.0 api 
                context used as a sandbox for OpenGLES 2.0 state.</span></li>
            <li class="class"><a href="Cogl.IndexBuffer.html">IndexBuffer</a> - </li>
            <li class="class"><a href="Cogl.Indices.html">Indices</a> - </li>
            <li class="class"><a href="Cogl.MatrixEntry.html">MatrixEntry</a> - <span class="brief_description">Represents a single immutable 
                transformation that was retrieved from a <a href="Cogl.MatrixStack.html" class="class">MatrixStack</a> using 
                <a href="Cogl.MatrixStack.get_entry.html" class="method">get_entry</a>.</span></li>
            <li class="class"><a href="Cogl.MatrixStack.html">MatrixStack</a> - <span class="brief_description">Tracks your current position within a 
                hierarchy and lets you build up a graph of transformations as you traverse through a hierarchy such as a scenegraph.</span></li>
            <li class="abstract_class"><a href="Cogl.Object.html">Object</a> - </li>
            <li class="class"><a href="Cogl.Onscreen.html">Onscreen</a> - </li>
            <li class="class"><a href="Cogl.OnscreenDirtyClosure.html">OnscreenDirtyClosure</a> - <span class="brief_description">An opaque type that 
                tracks a <a href="Cogl.OnscreenDirtyCallback.html" class="delegate">OnscreenDirtyCallback</a> and associated user data.</span></li>
            <li class="class"><a href="Cogl.OnscreenResizeClosure.html">OnscreenResizeClosure</a> - <span class="brief_description">An opaque type 
                that tracks a <a href="Cogl.OnscreenResizeCallback.html" class="delegate">OnscreenResizeCallback</a> and associated user data.</span>
            </li>
            <li class="class"><a href="Cogl.OnscreenTemplate.html">OnscreenTemplate</a> - </li>
            <li class="class"><a href="Cogl.Output.html">Output</a> - </li>
            <li class="class"><a href="Cogl.Pipeline.html">Pipeline</a> - </li>
            <li class="class"><a href="Cogl.PixelBuffer.html">PixelBuffer</a> - </li>
            <li class="class"><a href="Cogl.Primitive.html">Primitive</a> - </li>
            <li class="class"><a href="Cogl.Quaternion.html">Quaternion</a> - <span class="brief_description">A quaternion is comprised of a scalar 
                component and a 3D vector component.</span></li>
            <li class="class"><a href="Cogl.Renderer.html">Renderer</a> - </li>
            <li class="class"><a href="Cogl.Snippet.html">Snippet</a> - </li>
            <li class="class"><a href="Cogl.SubTexture.html">SubTexture</a> - </li>
            <li class="class"><a href="Cogl.SwapChain.html">SwapChain</a> - </li>
            <li class="class"><a href="Cogl.Texture2D.html">Texture2D</a> - </li>
            <li class="class"><a href="Cogl.Texture2DSliced.html">Texture2DSliced</a> - </li>
            <li class="class"><a href="Cogl.Texture3D.html">Texture3D</a> - </li>
            <li class="class"><a href="Cogl.TexturePixmapX11.html">TexturePixmapX11</a> - </li>
            <li class="class"><a href="Cogl.TextureRectangle.html">TextureRectangle</a> - </li>
          </ul>
          <h3 class="main_title">Structs:</h3>
          <ul class="navi_inline">
            <li class="struct"><a href="Cogl.Angle.html">Angle</a> - <span class="brief_description">Integer representation of an angle such that 1024
                 corresponds to full circle (i.</span></li>
            <li class="struct"><a href="Cogl.Bool.html">Bool</a> - <span class="brief_description">A boolean data type used throughout the Cogl C api.
              </span></li>
            <li class="struct"><a href="Cogl.Buffer.html">Buffer</a> - </li>
            <li class="struct"><a href="Cogl.DebugObjectTypeInfo.html">DebugObjectTypeInfo</a> - <span class="brief_description">This struct is used 
                to pass information to the callback when <a href="Cogl.debug_object_foreach_type.html" class="method">debug_object_foreach_type</a> is
                 called.</span></li>
            <li class="struct"><a href="Cogl.DepthState.html">DepthState</a> - </li>
            <li class="struct"><a href="Cogl.GtypeClass.html">GtypeClass</a> - </li>
            <li class="struct"><a href="Cogl.Handle.html">Handle</a> - <span class="brief_description">Type used for storing references to cogl 
                objects, the CoglHandle is a fully opaque type without any public data members.</span></li>
            <li class="struct"><a href="Cogl.KmsCrtc.html">KmsCrtc</a> - </li>
            <li class="struct"><a href="Cogl.Matrix.html">Matrix</a> - <span class="brief_description">A CoglMatrix holds a 4x4 transform matrix.
              </span></li>
            <li class="struct"><a href="Cogl.MetaTexture.html">MetaTexture</a> - </li>
            <li class="struct"><a href="Cogl.OnscreenDirtyInfo.html">OnscreenDirtyInfo</a> - <span class="brief_description">A structure passed to 
                callbacks registered using <a href="Cogl.Onscreen.add_dirty_callback.html" class="method">add_dirty_callback</a>.</span></li>
            <li class="struct"><a href="Cogl.PollFD.html">PollFD</a> - <span class="brief_description">A struct for describing the state of a file 
                descriptor that Cogl needs to block on.</span></li>
            <li class="struct"><a href="Cogl.PrimitiveTexture.html">PrimitiveTexture</a> - </li>
            <li class="struct"><a href="Cogl.TextureVertex.html">TextureVertex</a> - <span class="brief_description">Used to specify vertex 
                information when calling <code>cogl_polygon</code></span></li>
            <li class="struct"><a href="Cogl.UserDataKey.html">UserDataKey</a> - <span class="brief_description">A <span class="struct">UserDataKey
                </span> is used to declare a key for attaching data to a <a href="Cogl.Object.html" class="abstract_class">Object</a> using 
                cogl_object_set_user_data.</span></li>
            <li class="struct"><a href="Cogl.VertexP2.html">VertexP2</a> - <span class="brief_description">A convenience vertex definition that can be
                 used with <a href="Cogl.Primitive.Primitive.p2.html" class="creation_method">Primitive.p2</a>.</span></li>
            <li class="struct"><a href="Cogl.VertexP2C4.html">VertexP2C4</a> - <span class="brief_description">A convenience vertex definition that 
                can be used with <a href="Cogl.Primitive.Primitive.p2c4.html" class="creation_method">Primitive.p2c4</a>.</span></li>
            <li class="struct"><a href="Cogl.VertexP2T2.html">VertexP2T2</a> - <span class="brief_description">A convenience vertex definition that 
                can be used with <a href="Cogl.Primitive.Primitive.p2t2.html" class="creation_method">Primitive.p2t2</a>.</span></li>
            <li class="struct"><a href="Cogl.VertexP2T2C4.html">VertexP2T2C4</a> - <span class="brief_description">A convenience vertex definition 
                that can be used with <a href="Cogl.Primitive.Primitive.p3t2c4.html" class="creation_method">Primitive.p3t2c4</a>.</span></li>
            <li class="struct"><a href="Cogl.VertexP3.html">VertexP3</a> - <span class="brief_description">A convenience vertex definition that can be
                 used with <a href="Cogl.Primitive.Primitive.p3.html" class="creation_method">Primitive.p3</a>.</span></li>
            <li class="struct"><a href="Cogl.VertexP3C4.html">VertexP3C4</a> - <span class="brief_description">A convenience vertex definition that 
                can be used with <a href="Cogl.Primitive.Primitive.p3c4.html" class="creation_method">Primitive.p3c4</a>.</span></li>
            <li class="struct"><a href="Cogl.VertexP3T2.html">VertexP3T2</a> - <span class="brief_description">A convenience vertex definition that 
                can be used with <a href="Cogl.Primitive.Primitive.p3t2.html" class="creation_method">Primitive.p3t2</a>.</span></li>
            <li class="struct"><a href="Cogl.VertexP3T2C4.html">VertexP3T2C4</a> - <span class="brief_description">A convenience vertex definition 
                that can be used with <a href="Cogl.Primitive.Primitive.p3t2c4.html" class="creation_method">Primitive.p3t2c4</a>.</span></li>
            <li class="struct"><a href="Cogl._ColorSizeCheck.html">_ColorSizeCheck</a> - </li>
            <li class="struct"><a href="Cogl._EulerSizeCheck.html">_EulerSizeCheck</a> - </li>
            <li class="struct"><a href="Cogl._MatrixSizeCheck.html">_MatrixSizeCheck</a> - </li>
            <li class="struct"><a href="Cogl._QuaternionSizeCheck.html">_QuaternionSizeCheck</a> - </li>
            <li class="struct"><a href="Cogl._TextureVertexSizeCheck.html">_TextureVertexSizeCheck</a> - </li>
          </ul>
          <h3 class="main_title">Enums:</h3>
          <ul class="navi_inline">
            <li class="enum"><a href="Cogl.AttributeType.html">AttributeType</a> - <span class="brief_description">Data types for the components of a 
                vertex attribute.</span></li>
            <li class="enum"><a href="Cogl.BitmapError.html">BitmapError</a> - <span class="brief_description">Error codes that can be thrown when 
                performing bitmap operations.</span></li>
            <li class="enum"><a href="Cogl.BlendStringError.html">BlendStringError</a> - <span class="brief_description">Error enumeration for the 
                blend strings parser</span></li>
            <li class="enum"><a href="Cogl.BufferAccess.html">BufferAccess</a> - <span class="brief_description">The access hints for 
                <a href="Cogl.Buffer.set_update_hint.html" class="static_method">set_update_hint</a></span></li>
            <li class="enum"><a href="Cogl.BufferBit.html">BufferBit</a> - <span class="brief_description">Types of auxiliary buffers</span></li>
            <li class="enum"><a href="Cogl.BufferError.html">BufferError</a> - <span class="brief_description">Error enumeration for 
                <a href="Cogl.Buffer.html" class="struct">Buffer</a></span></li>
            <li class="enum"><a href="Cogl.BufferMapHint.html">BufferMapHint</a> - <span class="brief_description">Hints to Cogl about how you are 
                planning to modify the data once it is mapped.</span></li>
            <li class="enum"><a href="Cogl.BufferTarget.html">BufferTarget</a> - <span class="brief_description">Target flags for FBOs.</span></li>
            <li class="enum"><a href="Cogl.BufferUpdateHint.html">BufferUpdateHint</a> - <span class="brief_description">The update hint on a buffer 
                allows the user to give some detail on how often the buffer data is going to be updated.</span></li>
            <li class="enum"><a href="Cogl.ColorMask.html">ColorMask</a> - <span class="brief_description">Defines a bit mask of color channels.
              </span></li>
            <li class="enum"><a href="Cogl.DepthTestFunction.html">DepthTestFunction</a> - <span class="brief_description">When using depth testing 
                one of these functions is used to compare the depth of an incoming fragment against the depth value currently stored in the depth 
                buffer.</span></li>
            <li class="enum"><a href="Cogl.Driver.html">Driver</a> - <span class="brief_description">Identifiers for underlying hardware drivers that 
                may be used by Cogl for rendering.</span></li>
            <li class="enum"><a href="Cogl.FeatureFlags.html">FeatureFlags</a> - <span class="brief_description">Flags for the supported features.
              </span></li>
            <li class="enum"><a href="Cogl.FeatureID.html">FeatureID</a> - <span class="brief_description">All the capabilities that can vary between 
                different GPUs supported by Cogl.</span></li>
            <li class="enum"><a href="Cogl.FilterReturn.html">FilterReturn</a> - <span class="brief_description">Return values for the <code>
                  CoglXlibFilterFunc</code> and <code>CoglWin32FilterFunc</code> functions.</span></li>
            <li class="enum"><a href="Cogl.FogMode.html">FogMode</a> - <span class="brief_description">The fog mode determines the equation used to 
                calculate the fogging blend factor while fogging is enabled.</span></li>
            <li class="enum"><a href="Cogl.FrameEvent.html">FrameEvent</a> - <span class="brief_description">Identifiers that are passed to 
                <a href="Cogl.FrameCallback.html" class="delegate">FrameCallback</a> functions (registered using 
                <a href="Cogl.Onscreen.add_frame_callback.html" class="method">add_frame_callback</a>) that mark the progression of a frame in some 
                way which usually means that new information will have been accumulated in the frame's corresponding 
                <a href="Cogl.FrameInfo.html" class="class">FrameInfo</a> object.</span></li>
            <li class="enum"><a href="Cogl.FramebufferError.html">FramebufferError</a> - </li>
            <li class="enum"><a href="Cogl.GLES2ContextError.html">GLES2ContextError</a> - <span class="brief_description">Error codes that relate to 
                the cogl_gles2_context api.</span></li>
            <li class="enum"><a href="Cogl.IndicesType.html">IndicesType</a> - <span class="brief_description">You should aim to use the smallest data
                 type that gives you enough range, since it reduces the size of your index array and can help reduce the demand on memory bandwidth.
              </span></li>
            <li class="enum"><a href="Cogl.MaterialAlphaFunc.html">MaterialAlphaFunc</a> - </li>
            <li class="enum"><a href="Cogl.MaterialFilter.html">MaterialFilter</a> - </li>
            <li class="enum"><a href="Cogl.MaterialLayerType.html">MaterialLayerType</a> - </li>
            <li class="enum"><a href="Cogl.MaterialWrapMode.html">MaterialWrapMode</a> - </li>
            <li class="enum"><a href="Cogl.PipelineAlphaFunc.html">PipelineAlphaFunc</a> - <span class="brief_description">Alpha testing happens 
                before blending primitives with the framebuffer and gives an opportunity to discard fragments based on a comparison with the incoming 
                alpha value and a reference alpha value.</span></li>
            <li class="enum"><a href="Cogl.PipelineCullFaceMode.html">PipelineCullFaceMode</a> - <span class="brief_description">Specifies which faces
                 should be culled.</span></li>
            <li class="enum"><a href="Cogl.PipelineFilter.html">PipelineFilter</a> - <span class="brief_description">Texture filtering is used 
                whenever the current pixel maps either to more than one texture element (texel) or less than one.</span></li>
            <li class="enum"><a href="Cogl.PipelineWrapMode.html">PipelineWrapMode</a> - <span class="brief_description">The wrap mode specifies what 
                happens when texture coordinates outside the range 0→1 are used.</span></li>
            <li class="enum"><a href="Cogl.PixelFormat.html">PixelFormat</a> - <span class="brief_description">Pixel formats used by Cogl.</span></li>
            <li class="enum"><a href="Cogl.PollFDEvent.html">PollFDEvent</a> - <span class="brief_description">A bitmask of events that Cogl may need 
                to wake on for a file descriptor.</span></li>
            <li class="enum"><a href="Cogl.ReadPixelsFlags.html">ReadPixelsFlags</a> - <span class="brief_description">Flags for 
                <a href="Cogl.Framebuffer.read_pixels_into_bitmap.html" class="method">read_pixels_into_bitmap</a></span></li>
            <li class="enum"><a href="Cogl.RendererConstraint.html">RendererConstraint</a> - <span class="brief_description">These constraint flags 
                are hard-coded features of the different renderer backends.</span></li>
            <li class="enum"><a href="Cogl.RendererError.html">RendererError</a> - </li>
            <li class="enum"><a href="Cogl.ShaderType.html">ShaderType</a> - </li>
            <li class="enum"><a href="Cogl.SnippetHook.html">SnippetHook</a> - <span class="brief_description"><span class="enum">SnippetHook</span> 
                is used to specify a location within a <a href="Cogl.Pipeline.html" class="class">Pipeline</a> where the code of the snippet should be
                 used when it is attached to a pipeline.</span></li>
            <li class="enum"><a href="Cogl.StereoMode.html">StereoMode</a> - <span class="brief_description">Represents how draw should affect the two
                 buffers of a stereo framebuffer.</span></li>
            <li class="enum"><a href="Cogl.SubpixelOrder.html">SubpixelOrder</a> - <span class="brief_description">Some output devices (such as LCD 
                panels) display colors by making each pixel consist of smaller "subpixels" that each have a particular color.</span></li>
            <li class="enum"><a href="Cogl.SystemError.html">SystemError</a> - <span class="brief_description">Error enumeration for Cogl</span></li>
            <li class="enum"><a href="Cogl.TextureComponents.html">TextureComponents</a> - <span class="brief_description">See 
                <a href="Cogl.Texture.set_components.html" class="method">set_components</a>.</span></li>
            <li class="enum"><a href="Cogl.TextureError.html">TextureError</a> - <span class="brief_description">Error codes that can be thrown when 
                allocating textures.</span></li>
            <li class="enum"><a href="Cogl.TextureFlags.html">TextureFlags</a> - <span class="brief_description">Flags to pass to the 
                cogl_texture_new_* family of functions.</span></li>
            <li class="enum"><a href="Cogl.TexturePixmapX11Error.html">TexturePixmapX11Error</a> - <span class="brief_description">Error codes that 
                can be thrown when performing texture-pixmap-x11 operations.</span></li>
            <li class="enum"><a href="Cogl.TexturePixmapX11ReportLevel.html">TexturePixmapX11ReportLevel</a> - </li>
            <li class="enum"><a href="Cogl.TextureType.html">TextureType</a> - <span class="brief_description">Constants representing the underlying 
                hardware texture type of a <a href="Cogl.Texture.html" class="interface">Texture</a>.</span></li>
            <li class="enum"><a href="Cogl.VerticesMode.html">VerticesMode</a> - <span class="brief_description">Different ways of interpreting 
                vertices when drawing.</span></li>
            <li class="enum"><a href="Cogl.Winding.html">Winding</a> - <span class="brief_description">Enum used to represent the two directions of 
                rotation.</span></li>
            <li class="enum"><a href="Cogl.WinsysFeature.html">WinsysFeature</a> - </li>
            <li class="enum"><a href="Cogl.WinsysID.html">WinsysID</a> - <span class="brief_description">Identifies specific window system backends 
                that Cogl supports.</span></li>
          </ul>
          <h3 class="main_title">Constants:</h3>
          <ul class="navi_inline">
            <li class="constant"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">const</span> <span class="main_basic_type"><span class="struct">int</span></span> <b><a href="Cogl.AFIRST_BIT.html" class="constant">AFIRST_BIT</a></b>
              </span>
              <div class="leaf_brief_description">
              </div></li>
            <li class="constant"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">const</span> <span class="main_basic_type"><span class="struct">int</span></span> <b><a href="Cogl.A_BIT.html" class="constant">A_BIT</a></b>
              </span>
              <div class="leaf_brief_description">
              </div></li>
            <li class="constant"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">const</span> <span class="main_basic_type"><span class="struct">int</span></span> <b><a href="Cogl.BGR_BIT.html" class="constant">BGR_BIT</a></b>
              </span>
              <div class="leaf_brief_description">
              </div></li>
            <li class="constant"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">const</span> <span class="main_basic_type"><span class="struct">int</span></span> <b><a href="Cogl.DEPTH_BIT.html" class="constant">DEPTH_BIT</a></b>
              </span>
              <div class="leaf_brief_description">
              </div></li>
            <li class="constant"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">const</span> <span class="main_basic_type"><span class="struct">int</span></span> <b><a href="Cogl.PREMULT_BIT.html" class="constant">PREMULT_BIT</a></b>
              </span>
              <div class="leaf_brief_description">
              </div></li>
            <li class="constant"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">const</span> <span class="main_basic_type"><span class="struct">int</span></span> <b><a href="Cogl.STENCIL_BIT.html" class="constant">STENCIL_BIT</a></b>
              </span>
              <div class="leaf_brief_description">
              </div></li>
            <li class="constant"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">const</span> <span class="main_basic_type"><span class="struct">int</span></span> <b><a href="Cogl.TEXTURE_MAX_WASTE.html" class="constant">TEXTURE_MAX_WASTE</a></b>
              </span>
              <div class="leaf_brief_description">
              </div></li>
            <li class="constant"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">const</span> <span class="main_basic_type"><span class="struct">int</span></span> <b><a href="Cogl.VERSION_COMPONENT_BITS.html" class="constant">VERSION_COMPONENT_BITS</a></b>
              </span>
              <div class="leaf_brief_description">
              </div></li>
            <li class="constant"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">const</span> <span class="main_basic_type"><span class="struct">int</span></span> <b><a href="Cogl.VERSION_MAX_COMPONENT_VALUE.html" class="constant">VERSION_MAX_COMPONENT_VALUE</a></b>
              </span>
              <div class="leaf_brief_description">
              </div></li>
          </ul>
          <h3 class="main_title">Delegates:</h3>
          <ul class="navi_inline">
            <li class="delegate"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">delegate</span> <span class="main_keyword">void</span> <b><a href="Cogl.DebugObjectForeachTypeCallback.html" class="delegate">DebugObjectForeachTypeCallback</a></b> (<span class="main_type"><a href="Cogl.DebugObjectTypeInfo.html" class="struct">DebugObjectTypeInfo</a></span> info)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">A callback function to use for 
                  <a href="Cogl.debug_object_foreach_type.html" class="method">debug_object_foreach_type</a>.</span>
              </div></li>
            <li class="delegate"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">delegate</span> <span class="main_keyword">void</span> <b><a href="Cogl.FeatureCallback.html" class="delegate">FeatureCallback</a></b> (<span class="main_type"><a href="Cogl.FeatureID.html" class="enum">FeatureID</a></span> feature)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">A callback used with 
                  <a href="Cogl.foreach_feature.html" class="method">foreach_feature</a> for enumerating all context level features supported by Cogl.
                </span>
              </div></li>
            <li class="delegate"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">delegate</span> <span class="main_keyword">void</span> <b><a href="Cogl.FenceCallback.html" class="delegate">FenceCallback</a></b> (<span class="main_type"><a href="Cogl.Fence.html" class="class">Fence</a></span> fence)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">The callback prototype used with <code>
                    cogl_framebuffer_add_fence_callback</code> for notification of GPU command completion.</span>
              </div></li>
            <li class="delegate"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">delegate</span> <span class="main_keyword">void</span> <b><a href="Cogl.FrameCallback.html" class="delegate">FrameCallback</a></b> (<span class="main_type"><a href="Cogl.Onscreen.html" class="class">Onscreen</a></span> onscreen, <span class="main_type"><a href="Cogl.FrameEvent.html" class="enum">FrameEvent</a></span> event, <span class="main_type"><a href="Cogl.FrameInfo.html" class="class">FrameInfo</a></span> info)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Is a callback that can be registered via 
                  <a href="Cogl.Onscreen.add_frame_callback.html" class="method">add_frame_callback</a> to be called when a frame progresses in some 
                  notable way.</span>
              </div></li>
            <li class="delegate"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">delegate</span> <span class="main_keyword">void</span> <b><a href="Cogl.FuncPtr.html" class="delegate">FuncPtr</a></b> ()
              </span>
              <div class="leaf_brief_description"><span class="brief_description">The type used by cogl for function pointers, note that this type is 
                  used as a generic catch-all cast for function pointers and the actual arguments and return type may be different.</span>
              </div></li>
            <li class="delegate"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">delegate</span> <span class="main_keyword">void</span> <b><a href="Cogl.MetaTextureCallback.html" class="delegate">MetaTextureCallback</a></b> (<span class="main_type"><a href="Cogl.Texture.html" class="interface">Texture</a></span> sub_texture, <span class="main_basic_type"><span class="struct">float</span></span> sub_texture_coords, <span class="main_basic_type"><span class="struct">float</span></span> meta_coords)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">A callback used with <code>cogl_meta_texture_foreach_in_region
                  </code> to retrieve details of all the low-level <a href="Cogl.Texture.html" class="interface">Texture</a>&lt;!-- --&gt;s that make 
                  up a given <a href="Cogl.MetaTexture.html" class="struct">MetaTexture</a>.</span>
              </div></li>
            <li class="delegate"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">delegate</span> <span class="main_keyword">void</span> <b><a href="Cogl.OnscreenDirtyCallback.html" class="delegate">OnscreenDirtyCallback</a></b> (<span class="main_type"><a href="Cogl.Onscreen.html" class="class">Onscreen</a></span> onscreen, <span class="main_type"><a href="Cogl.OnscreenDirtyInfo.html" class="struct">OnscreenDirtyInfo</a></span> info)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Is a callback that can be registered via 
                  <a href="Cogl.Onscreen.add_dirty_callback.html" class="method">add_dirty_callback</a> to be called when the windowing system 
                  determines that a region of the onscreen window has been lost and the application should redraw it.</span>
              </div></li>
            <li class="delegate"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">delegate</span> <span class="main_keyword">void</span> <b><a href="Cogl.OnscreenResizeCallback.html" class="delegate">OnscreenResizeCallback</a></b> (<span class="main_type"><a href="Cogl.Onscreen.html" class="class">Onscreen</a></span> onscreen, <span class="main_basic_type"><span class="struct">int</span></span> width, <span class="main_basic_type"><span class="struct">int</span></span> height)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Is a callback type used with the 
                  <a href="Cogl.Onscreen.add_resize_callback.html" class="method">add_resize_callback</a> allowing applications to be notified 
                  whenever an <code>onscreen</code> framebuffer is resized.</span>
              </div></li>
            <li class="delegate"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">delegate</span> <span class="main_keyword">void</span> <b><a href="Cogl.OnscreenX11MaskCallback.html" class="delegate">OnscreenX11MaskCallback</a></b> (<span class="main_type"><a href="Cogl.Onscreen.html" class="class">Onscreen</a></span> onscreen, <span class="main_basic_type"><span class="struct">uint32</span></span> event_mask)
              </span>
              <div class="leaf_brief_description">
              </div></li>
            <li class="delegate"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">delegate</span> <span class="main_keyword">void</span> <b><a href="Cogl.OutputCallback.html" class="delegate">OutputCallback</a></b> (<span class="main_type"><a href="Cogl.Output.html" class="class">Output</a></span> output)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">A callback type that can be passed to 
                  <a href="Cogl.Renderer.foreach_output.html" class="method">foreach_output</a> for iterating display outputs for a given renderer.
                </span>
              </div></li>
            <li class="delegate"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">delegate</span> <span class="main_type"><a href="Cogl.Bool.html" class="struct">Bool</a></span> <b><a href="Cogl.PipelineLayerCallback.html" class="delegate">PipelineLayerCallback</a></b> (<span class="main_type"><a href="Cogl.Pipeline.html" class="class">Pipeline</a></span> pipeline, <span class="main_basic_type"><span class="struct">int</span></span> layer_index)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">The callback prototype used with 
                  <a href="Cogl.Pipeline.foreach_layer.html" class="method">foreach_layer</a> for iterating all the layers of a <code>pipeline</code>.
                </span>
              </div></li>
            <li class="delegate"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">delegate</span> <span class="main_type"><a href="Cogl.Bool.html" class="struct">Bool</a></span> <b><a href="Cogl.PrimitiveAttributeCallback.html" class="delegate">PrimitiveAttributeCallback</a></b> (<span class="main_type"><a href="Cogl.Primitive.html" class="class">Primitive</a></span> primitive, <span class="main_type"><a href="Cogl.Attribute.html" class="class">Attribute</a></span> attribute)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">The callback prototype used with 
                  <a href="Cogl.Primitive.foreach_attribute.html" class="method">foreach_attribute</a> for iterating all the attributes of a 
                  <a href="Cogl.Primitive.html" class="class">Primitive</a>.</span>
              </div></li>
            <li class="delegate"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">delegate</span> <span class="main_keyword">void</span> <b><a href="Cogl.SwapBuffersNotify.html" class="delegate">SwapBuffersNotify</a></b> (<span class="main_type"><a href="Cogl.Framebuffer.html" class="interface">Framebuffer</a></span> framebuffer)
              </span>
              <div class="leaf_brief_description">
              </div></li>
            <li class="delegate"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">delegate</span> <span class="main_keyword">void</span> <b><a href="Cogl.UserDataDestroyCallback.html" class="delegate">UserDataDestroyCallback</a></b> (<span class="main_keyword">void</span>* data)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">When associating private data with a 
                  <a href="Cogl.Object.html" class="abstract_class">Object</a> a callback can be given which will be called either if the object is 
                  destroyed or if <code>cogl_object_set_user_data</code> is called with NULL user_data for the same key.</span>
              </div></li>
          </ul>
          <h3 class="main_title">Methods:</h3>
          <ul class="navi_inline">
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">void</span> <b><a href="Cogl.debug_matrix_entry_print.html" class="method">debug_matrix_entry_print</a></b> (<span class="main_type"><a href="Cogl.MatrixEntry.html" class="class">MatrixEntry</a></span> entry)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Allows visualizing the operations that build up the given <code>
                    entry</code> for debugging purposes by printing to stdout.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">void</span> <b><a href="Cogl.debug_matrix_print.html" class="method">debug_matrix_print</a></b> (<span class="main_type"><a href="Cogl.Matrix.html" class="struct">Matrix</a></span> matrix)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Prints the contents of a <a href="Cogl.Matrix.html" class="struct">
                    Matrix</a> to stdout.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">void</span> <b><a href="Cogl.debug_object_foreach_type.html" class="method">debug_object_foreach_type</a></b> (<span class="main_type"><a href="Cogl.DebugObjectForeachTypeCallback.html" class="delegate">DebugObjectForeachTypeCallback</a></span> func)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Invokes <code>func</code> once for each type of object that Cogl 
                  uses and passes a count of the number of objects for that type.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">void</span> <b><a href="Cogl.debug_object_print_instances.html" class="method">debug_object_print_instances</a></b> ()
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Prints a list of all the object types that Cogl uses along with the 
                  number of objects of that type that are currently in use.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">void</span> <b><a href="Cogl.foreach_feature.html" class="method">foreach_feature</a></b> (<span class="main_type"><a href="Cogl.Context.html" class="class">Context</a></span> context, <span class="main_type"><a href="Cogl.FeatureCallback.html" class="delegate">FeatureCallback</a></span> callback)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Iterates through all the context level features currently supported 
                  for a given <code>context</code> and for each feature <code>callback</code> is called.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_basic_type"><span class="struct">int64</span></span> <b><a href="Cogl.get_clock_time.html" class="method">get_clock_time</a></b> (<span class="main_type"><a href="Cogl.Context.html" class="class">Context</a></span> context)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Returns the current time value from Cogl's internal clock.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">weak</span> <span class="main_type"><a href="Cogl.Framebuffer.html" class="interface">Framebuffer</a></span> <b><a href="Cogl.get_draw_framebuffer.html" class="method">get_draw_framebuffer</a></b> ()
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Gets the current <a href="Cogl.Framebuffer.html" class="interface">
                    Framebuffer</a> as set using <code>cogl_push_framebuffer</code></span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">weak</span> <span class="main_type"><a href="Cogl.Indices.html" class="class">Indices</a></span> <b><a href="Cogl.get_rectangle_indices.html" class="method">get_rectangle_indices</a></b> (<span class="main_type"><a href="Cogl.Context.html" class="class">Context</a></span> context, <span class="main_basic_type"><span class="struct">int</span></span> n_rectangles)
              </span>
              <div class="leaf_brief_description">
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">unowned</span> <span class="main_type"><a href="Cogl.Quaternion.html" class="class">Quaternion</a></span> <b><a href="Cogl.get_static_identity_quaternion.html" class="method">get_static_identity_quaternion</a></b> ()
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Returns a pointer to a singleton quaternion constant describing the 
                  canonical identity [1 (0, 0, 0)] which represents no rotation.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">unowned</span> <span class="main_type"><a href="Cogl.Quaternion.html" class="class">Quaternion</a></span> <b><a href="Cogl.get_static_zero_quaternion.html" class="method">get_static_zero_quaternion</a></b> ()
              </span>
              <div class="leaf_brief_description"><span class="brief_description"></span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_type"><a href="Cogl.Bool.html" class="struct">Bool</a></span> <b><a href="Cogl.gles2_texture_get_handle.html" class="method">gles2_texture_get_handle</a></b> (<span class="main_type"><a href="Cogl.Texture.html" class="interface">Texture</a></span> texture, <span class="main_basic_type"><span class="struct">uint</span></span> handle, <span class="main_basic_type"><span class="struct">uint</span></span> target)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Gets an OpenGL ES 2.0 texture handle for a 
                  <a href="Cogl.Texture.html" class="interface">Texture</a> that can then be referenced by a 
                  <a href="Cogl.GLES2Context.html" class="class">GLES2Context</a>.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_type"><span class="abstract_class">Source</span></span> <b><a href="Cogl.glib_renderer_source_new.html" class="method">glib_renderer_source_new</a></b> (<span class="main_type"><a href="Cogl.Renderer.html" class="class">Renderer</a></span> renderer, <span class="main_basic_type"><span class="struct">int</span></span> priority)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Creates a <span class="class">SignalSource</span> which handles 
                  Cogl's internal system event processing.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_type"><span class="abstract_class">Source</span></span> <b><a href="Cogl.glib_source_new.html" class="method">glib_source_new</a></b> (<span class="main_type"><a href="Cogl.Context.html" class="class">Context</a></span> context, <span class="main_basic_type"><span class="struct">int</span></span> priority)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Creates a <span class="class">SignalSource</span> which handles 
                  Cogl's internal system event processing.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="deprecated"><span class="main_keyword">public</span> <span class="main_type"><span class="struct">Type</span></span> <b><a href="Cogl.gtype_matrix_get_type.html" class="method">gtype_matrix_get_type</a></b> ()
                </span></span>
              <div class="leaf_brief_description"><span class="brief_description"></span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_type"><a href="Cogl.Bool.html" class="struct">Bool</a></span> <b><a href="Cogl.has_feature.html" class="method">has_feature</a></b> (<span class="main_type"><a href="Cogl.Context.html" class="class">Context</a></span> context, <span class="main_type"><a href="Cogl.FeatureID.html" class="enum">FeatureID</a></span> feature)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Checks if a given <code>feature</code> is currently available</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">void</span> <b><a href="Cogl.kms_display_queue_modes_reset.html" class="method">kms_display_queue_modes_reset</a></b> (<span class="main_type"><a href="Cogl.Display.html" class="class">Display</a></span> display)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Asks Cogl to explicitly reset the crtc output modes at the next 
                  <a href="Cogl.Onscreen.html" class="class">Onscreen</a> swap_buffers request.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">void</span> <b><a href="Cogl.kms_display_set_ignore_crtc.html" class="method">kms_display_set_ignore_crtc</a></b> (<span class="main_type"><a href="Cogl.Display.html" class="class">Display</a></span> display, <span class="main_basic_type"><span class="struct">uint32</span></span> id, <span class="main_type"><a href="Cogl.Bool.html" class="struct">Bool</a></span> ignore)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Tells cogl to ignore (or stop ignoring) a ctrc which means it never 
                  flips buffers at this crtc.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_type"><a href="Cogl.Bool.html" class="struct">Bool</a></span> <b><a href="Cogl.kms_display_set_layout.html" class="method">kms_display_set_layout</a></b> (<span class="main_type"><a href="Cogl.Display.html" class="class">Display</a></span> display, <span class="main_basic_type"><span class="struct">int</span></span> width, <span class="main_basic_type"><span class="struct">int</span></span> height, <span class="main_type"><a href="Cogl.KmsCrtc.html" class="struct">KmsCrtc</a></span> crtcs, <span class="main_basic_type"><span class="struct">int</span></span> n_crtcs) <span class="main_keyword">throws</span> <span class="main_type"><span class="class">Error</span></span>
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Configures <code>display</code> to use a framebuffer sized <code>
                    width</code> x <code>height</code>, covering the CRTCS in <code>crtcs</code>.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_basic_type"><span class="struct">int</span></span> <b><a href="Cogl.kms_renderer_get_kms_fd.html" class="method">kms_renderer_get_kms_fd</a></b> (<span class="main_type"><a href="Cogl.Renderer.html" class="class">Renderer</a></span> renderer)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Queries the file descriptor Cogl is using internally for 
                  communicating with the kms driver.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">void</span> <b><a href="Cogl.kms_renderer_set_kms_fd.html" class="method">kms_renderer_set_kms_fd</a></b> (<span class="main_type"><a href="Cogl.Renderer.html" class="class">Renderer</a></span> renderer, <span class="main_basic_type"><span class="struct">int</span></span> fd)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Sets the file descriptor Cogl should use to communicate to the kms 
                  driver.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">void</span> <b><a href="Cogl.poll_renderer_dispatch.html" class="method">poll_renderer_dispatch</a></b> (<span class="main_type"><a href="Cogl.Renderer.html" class="class">Renderer</a></span> renderer, <span class="main_type"><a href="Cogl.PollFD.html" class="struct">PollFD</a></span>[] poll_fds)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">This should be called whenever an application is woken up from going
                   idle in its main loop.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_basic_type"><span class="struct">int</span></span> <b><a href="Cogl.poll_renderer_get_info.html" class="method">poll_renderer_get_info</a></b> (<span class="main_type"><a href="Cogl.Renderer.html" class="class">Renderer</a></span> renderer, <span class="main_keyword">out</span> <span class="main_type"><a href="Cogl.PollFD.html" class="struct">PollFD</a></span>[] poll_fds, <span class="main_keyword">out</span> <span class="main_basic_type"><span class="struct">int64</span></span> timeout)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Is used to integrate Cogl with an application mainloop that is based
                   on the unix poll(2) api (or <code>select</code> or something equivalent).</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">void</span> <b><a href="Cogl.pop_gles2_context.html" class="method">pop_gles2_context</a></b> (<span class="main_type"><a href="Cogl.Context.html" class="class">Context</a></span> ctx)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Restores the previously active 
                  <a href="Cogl.GLES2Context.html" class="class">GLES2Context</a> if there were nested calls to 
                  <a href="Cogl.push_gles2_context.html" class="method">push_gles2_context</a> or otherwise restores the ability to render with the 
                  Cogl api instead of OpenGLES 2.0.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_type"><a href="Cogl.Bool.html" class="struct">Bool</a></span> <b><a href="Cogl.push_gles2_context.html" class="method">push_gles2_context</a></b> (<span class="main_type"><a href="Cogl.Context.html" class="class">Context</a></span> ctx, <span class="main_type"><a href="Cogl.GLES2Context.html" class="class">GLES2Context</a></span> gles2_ctx, <span class="main_type"><a href="Cogl.Framebuffer.html" class="interface">Framebuffer</a></span> read_buffer, <span class="main_type"><a href="Cogl.Framebuffer.html" class="interface">Framebuffer</a></span> write_buffer) <span class="main_keyword">throws</span> <span class="main_type"><span class="class">Error</span></span>
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Pushes the given <code>gles2_ctx</code> onto a stack associated with
                   <code>ctx</code> so that the OpenGLES 2.0 api can be used instead of the Cogl rendering apis to read and write to the specified 
                  framebuffers.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">void</span> <b><a href="Cogl.vector3_add.html" class="method">vector3_add</a></b> (<span class="main_basic_type"><span class="struct">float</span></span> result, <span class="main_basic_type"><span class="struct">float</span></span> a, <span class="main_basic_type"><span class="struct">float</span></span> b)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Adds each of the corresponding components in vectors <code>a</code> 
                  and <code>b</code> storing the results in <code>result</code>.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_basic_type"><span class="struct">float</span></span> <b><a href="Cogl.vector3_copy.html" class="method">vector3_copy</a></b> (<span class="main_basic_type"><span class="struct">float</span></span> vector)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Allocates a new 3 component float vector on the heap initializing 
                  the components from the given <code>vector</code> and returns a pointer to the newly allocated vector.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">void</span> <b><a href="Cogl.vector3_cross_product.html" class="method">vector3_cross_product</a></b> (<span class="main_basic_type"><span class="struct">float</span></span> result, <span class="main_basic_type"><span class="struct">float</span></span> u, <span class="main_basic_type"><span class="struct">float</span></span> v)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Calculates the cross product between the two vectors <code>u</code> 
                  and <code>v</code>.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_basic_type"><span class="struct">float</span></span> <b><a href="Cogl.vector3_distance.html" class="method">vector3_distance</a></b> (<span class="main_basic_type"><span class="struct">float</span></span> a, <span class="main_basic_type"><span class="struct">float</span></span> b)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">If you consider the two given vectors as (x,y,z) points instead then
                   this will compute the distance between those two points.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">void</span> <b><a href="Cogl.vector3_divide_scalar.html" class="method">vector3_divide_scalar</a></b> (<span class="main_basic_type"><span class="struct">float</span></span> vector, <span class="main_basic_type"><span class="struct">float</span></span> scalar)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Divides each of the <code>vector</code> components by the given 
                  scalar.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_basic_type"><span class="struct">float</span></span> <b><a href="Cogl.vector3_dot_product.html" class="method">vector3_dot_product</a></b> (<span class="main_basic_type"><span class="struct">float</span></span> a, <span class="main_basic_type"><span class="struct">float</span></span> b)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Calculates the dot product of the two 3 component vectors.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_type"><a href="Cogl.Bool.html" class="struct">Bool</a></span> <b><a href="Cogl.vector3_equal.html" class="method">vector3_equal</a></b> (<span class="main_keyword">void</span>* v1, <span class="main_keyword">void</span>* v2)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Compares the components of two vectors and returns TRUE if they are 
                  the same.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_type"><a href="Cogl.Bool.html" class="struct">Bool</a></span> <b><a href="Cogl.vector3_equal_with_epsilon.html" class="method">vector3_equal_with_epsilon</a></b> (<span class="main_basic_type"><span class="struct">float</span></span> vector0, <span class="main_basic_type"><span class="struct">float</span></span> vector1, <span class="main_basic_type"><span class="struct">float</span></span> epsilon)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Compares the components of two vectors using the given epsilon and 
                  returns TRUE if they are the same, using an internal epsilon for comparing the floats.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">void</span> <b><a href="Cogl.vector3_free.html" class="method">vector3_free</a></b> (<span class="main_basic_type"><span class="struct">float</span></span> vector)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Frees a 3 component vector that was previously allocated with 
                  <a href="Cogl.vector3_copy.html" class="method">vector3_copy</a></span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">void</span> <b><a href="Cogl.vector3_init.html" class="method">vector3_init</a></b> (<span class="main_basic_type"><span class="struct">float</span></span> vector, <span class="main_basic_type"><span class="struct">float</span></span> x, <span class="main_basic_type"><span class="struct">float</span></span> y, <span class="main_basic_type"><span class="struct">float</span></span> z)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Initializes a 3 component, single precision float vector which can 
                  then be manipulated with the cogl_vector convenience APIs.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">void</span> <b><a href="Cogl.vector3_init_zero.html" class="method">vector3_init_zero</a></b> (<span class="main_basic_type"><span class="struct">float</span></span> vector)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Initializes a 3 component, single precision float vector with zero 
                  for each component.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">void</span> <b><a href="Cogl.vector3_invert.html" class="method">vector3_invert</a></b> (<span class="main_basic_type"><span class="struct">float</span></span> vector)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Inverts/negates all the components of the given <code>vector</code>.
                </span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_basic_type"><span class="struct">float</span></span> <b><a href="Cogl.vector3_magnitude.html" class="method">vector3_magnitude</a></b> (<span class="main_basic_type"><span class="struct">float</span></span> vector)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Calculates the scalar magnitude or length of <code>vector</code>.
                </span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">void</span> <b><a href="Cogl.vector3_multiply_scalar.html" class="method">vector3_multiply_scalar</a></b> (<span class="main_basic_type"><span class="struct">float</span></span> vector, <span class="main_basic_type"><span class="struct">float</span></span> scalar)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Multiplies each of the <code>vector</code> components by the given 
                  scalar.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">void</span> <b><a href="Cogl.vector3_normalize.html" class="method">vector3_normalize</a></b> (<span class="main_basic_type"><span class="struct">float</span></span> vector)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Updates the vector so it is a "unit vector" such that the <code>
                    vector</code>&lt;!-- --&gt;s magnitude or length is equal to 1.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">void</span> <b><a href="Cogl.vector3_subtract.html" class="method">vector3_subtract</a></b> (<span class="main_basic_type"><span class="struct">float</span></span> result, <span class="main_basic_type"><span class="struct">float</span></span> a, <span class="main_basic_type"><span class="struct">float</span></span> b)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Subtracts each of the corresponding components in vector <code>b
                  </code> from <code>a</code> storing the results in <code>result</code>.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">void</span> <b><a href="Cogl.wayland_display_set_compositor_display.html" class="method">wayland_display_set_compositor_display</a></b> (<span class="main_type"><a href="Cogl.Display.html" class="class">Display</a></span> display, <span class="main_keyword">void</span>* wayland_display)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Informs Cogl of a compositor's Wayland display pointer.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">void</span> <b><a href="Cogl.wayland_onscreen_resize.html" class="method">wayland_onscreen_resize</a></b> (<span class="main_type"><a href="Cogl.Onscreen.html" class="class">Onscreen</a></span> onscreen, <span class="main_basic_type"><span class="struct">int</span></span> width, <span class="main_basic_type"><span class="struct">int</span></span> height, <span class="main_basic_type"><span class="struct">int</span></span> offset_x, <span class="main_basic_type"><span class="struct">int</span></span> offset_y)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Resizes the backbuffer of the given <code>onscreen</code> 
                  framebuffer to the given size.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">void</span> <b><a href="Cogl.wayland_onscreen_set_foreign_surface.html" class="method">wayland_onscreen_set_foreign_surface</a></b> (<span class="main_type"><a href="Cogl.Onscreen.html" class="class">Onscreen</a></span> onscreen, <span class="main_keyword">void</span>* surface)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Allows you to explicitly notify Cogl of an existing Wayland surface 
                  to use, which prevents Cogl from allocating a surface and shell surface for the <code>onscreen</code>.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">void</span> <b><a href="Cogl.wayland_renderer_set_event_dispatch_enabled.html" class="method">wayland_renderer_set_event_dispatch_enabled</a></b> (<span class="main_type"><a href="Cogl.Renderer.html" class="class">Renderer</a></span> renderer, <span class="main_type"><a href="Cogl.Bool.html" class="struct">Bool</a></span> enable)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Sets whether Cogl should handle calling <code>wl_display_dispatch
                  </code> and <code>wl_display_flush</code> as part of its main loop integration via 
                  <a href="Cogl.poll_renderer_get_info.html" class="method">poll_renderer_get_info</a> and 
                  <a href="Cogl.poll_renderer_dispatch.html" class="method">poll_renderer_dispatch</a>.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">void</span> <b><a href="Cogl.wayland_renderer_set_foreign_display.html" class="method">wayland_renderer_set_foreign_display</a></b> (<span class="main_type"><a href="Cogl.Renderer.html" class="class">Renderer</a></span> renderer, <span class="main_keyword">void</span>* display)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Allows you to explicitly control what Wayland display you want Cogl 
                  to work with instead of leaving Cogl to automatically connect to a wayland compositor.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_type"><a href="Cogl.Bool.html" class="struct">Bool</a></span> <b><a href="Cogl.wayland_texture_set_region_from_shm_buffer.html" class="method">wayland_texture_set_region_from_shm_buffer</a></b> (<span class="main_type"><a href="Cogl.Texture.html" class="interface">Texture</a></span> texture, <span class="main_basic_type"><span class="struct">int</span></span> src_x, <span class="main_basic_type"><span class="struct">int</span></span> src_y, <span class="main_basic_type"><span class="struct">int</span></span> width, <span class="main_basic_type"><span class="struct">int</span></span> height, <span class="main_keyword">void</span>* shm_buffer, <span class="main_basic_type"><span class="struct">int</span></span> dst_x, <span class="main_basic_type"><span class="struct">int</span></span> dst_y, <span class="main_basic_type"><span class="struct">int</span></span> level) <span class="main_keyword">throws</span> <span class="main_type"><span class="class">Error</span></span>
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Sets the pixels in a rectangular subregion of <code>texture</code> 
                  from a Wayland SHM buffer.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_basic_type"><span class="struct">uint32</span></span> <b><a href="Cogl.x11_onscreen_get_visual_xid.html" class="method">x11_onscreen_get_visual_xid</a></b> (<span class="main_type"><a href="Cogl.Onscreen.html" class="class">Onscreen</a></span> onscreen)
              </span>
              <div class="leaf_brief_description">
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_basic_type"><span class="struct">uint32</span></span> <b><a href="Cogl.x11_onscreen_get_window_xid.html" class="method">x11_onscreen_get_window_xid</a></b> (<span class="main_type"><a href="Cogl.Onscreen.html" class="class">Onscreen</a></span> onscreen)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Assuming you know the given <code>onscreen</code> framebuffer is 
                  based on an x11 window this queries the XID of that window.</span>
              </div></li>
          </ul>
          <li class="namespace"><a href="CoglGst.html">CoglGst</a> - </li>
          <h3 class="main_title">Classes:</h3>
          <ul class="navi_inline">
            <li class="class"><a href="CoglGst.Rectangle.html">Rectangle</a> - <span class="brief_description">Describes a rectangle that can be used 
                for video output.</span></li>
            <li class="class"><a href="CoglGst.VideoSink.html">VideoSink</a> - <span class="brief_description">The <span class="class">VideoSink
                </span> structure contains only private data and should be accessed using the provided API.</span></li>
          </ul>
          <li class="namespace"><a href="CoglPango.html">CoglPango</a> - </li>
          <h3 class="main_title">Interfaces:</h3>
          <ul class="navi_inline">
            <li class="interface"><a href="CoglPango.FontMap.html">FontMap</a> - </li>
          </ul>
          <h3 class="main_title">Classes:</h3>
          <ul class="navi_inline">
            <li class="class"><a href="CoglPango.Renderer.html">Renderer</a> - </li>
          </ul>
          <h3 class="main_title">Methods:</h3>
          <ul class="navi_inline">
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">void</span> <b><a href="CoglPango.ensure_glyph_cache_for_layout.html" class="method">ensure_glyph_cache_for_layout</a></b> (<span class="main_type"><span class="class">Layout</span></span> layout)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">This updates any internal glyph cache textures as necessary to be 
                  able to render the given <code>layout</code>.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="deprecated"><span class="main_keyword">public</span> <span class="main_keyword">void</span> <b><a href="CoglPango.render_layout.html" class="method">render_layout</a></b> (<span class="main_type"><span class="class">Layout</span></span> layout, <span class="main_basic_type"><span class="struct">int</span></span> x, <span class="main_basic_type"><span class="struct">int</span></span> y, <span class="main_type"><a href="Cogl.Color.html" class="class">Color</a></span> color, <span class="main_basic_type"><span class="struct">int</span></span> flags)
                </span></span>
              <div class="leaf_brief_description"><span class="brief_description">Draws a solidly coloured <code>layout</code> on the given <code>
                    framebuffer</code> at (<code>x</code>, <code>y</code>) within the <code>framebuffer</code>&lt;!-- --&gt;'s current model-view 
                  coordinate space.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="deprecated"><span class="main_keyword">public</span> <span class="main_keyword">void</span> <b><a href="CoglPango.render_layout_line.html" class="method">render_layout_line</a></b> (<span class="main_type"><span class="class">LayoutLine</span></span> line, <span class="main_basic_type"><span class="struct">int</span></span> x, <span class="main_basic_type"><span class="struct">int</span></span> y, <span class="main_type"><a href="Cogl.Color.html" class="class">Color</a></span> color)
                </span></span>
              <div class="leaf_brief_description"><span class="brief_description">Renders <code>line</code> at the given coordinates using the given 
                  color.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="deprecated"><span class="main_keyword">public</span> <span class="main_keyword">void</span> <b><a href="CoglPango.render_layout_subpixel.html" class="method">render_layout_subpixel</a></b> (<span class="main_type"><span class="class">Layout</span></span> layout, <span class="main_basic_type"><span class="struct">int</span></span> x, <span class="main_basic_type"><span class="struct">int</span></span> y, <span class="main_type"><a href="Cogl.Color.html" class="class">Color</a></span> color, <span class="main_basic_type"><span class="struct">int</span></span> flags)
                </span></span>
              <div class="leaf_brief_description"><span class="brief_description">Draws a solidly coloured <code>layout</code> on the given <code>
                    framebuffer</code> at (<code>x</code>, <code>y</code>) within the <code>framebuffer</code>&lt;!-- --&gt;'s current model-view 
                  coordinate space.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">void</span> <b><a href="CoglPango.show_layout.html" class="method">show_layout</a></b> (<span class="main_type"><a href="Cogl.Framebuffer.html" class="interface">Framebuffer</a></span> framebuffer, <span class="main_type"><span class="class">Layout</span></span> layout, <span class="main_basic_type"><span class="struct">float</span></span> x, <span class="main_basic_type"><span class="struct">float</span></span> y, <span class="main_type"><a href="Cogl.Color.html" class="class">Color</a></span> color)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Draws a solidly coloured <code>layout</code> on the given <code>
                    framebuffer</code> at (<code>x</code>, <code>y</code>) within the <code>framebuffer</code>&lt;!-- --&gt;'s current model-view 
                  coordinate space.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">void</span> <b><a href="CoglPango.show_layout_line.html" class="method">show_layout_line</a></b> (<span class="main_type"><a href="Cogl.Framebuffer.html" class="interface">Framebuffer</a></span> framebuffer, <span class="main_type"><span class="class">LayoutLine</span></span> line, <span class="main_basic_type"><span class="struct">float</span></span> x, <span class="main_basic_type"><span class="struct">float</span></span> y, <span class="main_type"><a href="Cogl.Color.html" class="class">Color</a></span> color)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Draws a solidly coloured <code>line</code> on the given <code>
                    framebuffer</code> at (<code>x</code>, <code>y</code>) within the <code>framebuffer</code>&lt;!-- --&gt;'s current model-view 
                  coordinate space.</span>
              </div></li>
          </ul>
        </ul>
      </div>
    </div><br/>
    <div class="site_footer">Generated by <a href="http://www.valadoc.org/">Valadoc</a>
    </div>
  </body>
</html>