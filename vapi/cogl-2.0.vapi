/* cogl-2.0.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Cogl", gir_namespace = "Cogl", gir_version = "2.0", lower_case_cprefix = "cogl_")]
namespace Cogl {
	[CCode (cheader_filename = "cogl/cogl.h", type_id = "cogl_atlas_texture_get_gtype ()")]
	public class AtlasTexture : Cogl.Object {
		[CCode (has_construct_function = false)]
		protected AtlasTexture ();
		[CCode (has_construct_function = false)]
		public AtlasTexture.from_bitmap (Cogl.Bitmap bmp);
		[CCode (has_construct_function = false)]
		public AtlasTexture.from_data (Cogl.Context ctx, int width, int height, Cogl.PixelFormat format, int rowstride, uint8 data) throws GLib.Error;
		[CCode (has_construct_function = false)]
		public AtlasTexture.from_file (Cogl.Context ctx, string filename) throws GLib.Error;
		[CCode (has_construct_function = false)]
		public AtlasTexture.with_size (Cogl.Context ctx, int width, int height);
	}
	[CCode (cheader_filename = "cogl/cogl.h", type_id = "cogl_attribute_get_gtype ()")]
	public class Attribute : Cogl.Object {
		[CCode (has_construct_function = false)]
		public Attribute (Cogl.AttributeBuffer attribute_buffer, string name, ulong stride, ulong offset, int components, Cogl.AttributeType type);
		[CCode (has_construct_function = false)]
		public Attribute.const_1f (Cogl.Context context, string name, float value);
		[CCode (has_construct_function = false)]
		public Attribute.const_2f (Cogl.Context context, string name, float component0, float component1);
		[CCode (has_construct_function = false)]
		public Attribute.const_2fv (Cogl.Context context, string name, float value);
		[CCode (has_construct_function = false)]
		public Attribute.const_2x2fv (Cogl.Context context, string name, float matrix2x2, Cogl.Bool transpose);
		[CCode (has_construct_function = false)]
		public Attribute.const_3f (Cogl.Context context, string name, float component0, float component1, float component2);
		[CCode (has_construct_function = false)]
		public Attribute.const_3fv (Cogl.Context context, string name, float value);
		[CCode (has_construct_function = false)]
		public Attribute.const_3x3fv (Cogl.Context context, string name, float matrix3x3, Cogl.Bool transpose);
		[CCode (has_construct_function = false)]
		public Attribute.const_4f (Cogl.Context context, string name, float component0, float component1, float component2, float component3);
		[CCode (has_construct_function = false)]
		public Attribute.const_4fv (Cogl.Context context, string name, float value);
		[CCode (has_construct_function = false)]
		public Attribute.const_4x4fv (Cogl.Context context, string name, float matrix4x4, Cogl.Bool transpose);
		public unowned Cogl.AttributeBuffer get_buffer ();
		public Cogl.Bool get_normalized ();
		public void set_buffer (Cogl.AttributeBuffer attribute_buffer);
		public void set_normalized (Cogl.Bool normalized);
	}
	[CCode (cheader_filename = "cogl/cogl.h", type_id = "cogl_attribute_buffer_get_gtype ()")]
	public class AttributeBuffer : Cogl.Object {
		[CCode (has_construct_function = false)]
		protected AttributeBuffer ();
		[CCode (has_construct_function = false)]
		public AttributeBuffer.with_size (Cogl.Context context, ulong bytes);
	}
	[CCode (cheader_filename = "cogl/cogl.h", type_id = "cogl_bitmap_get_gtype ()")]
	public class Bitmap : Cogl.Object {
		[CCode (has_construct_function = false)]
		protected Bitmap ();
		[CCode (has_construct_function = false)]
		public Bitmap.for_data (Cogl.Context context, int width, int height, Cogl.PixelFormat format, int rowstride, uint8 data);
		[CCode (has_construct_function = false)]
		public Bitmap.from_buffer (Cogl.Buffer buffer, Cogl.PixelFormat format, int width, int height, int rowstride, int offset);
		[CCode (has_construct_function = false)]
		public Bitmap.from_file (string filename) throws GLib.Error;
		public unowned Cogl.PixelBuffer get_buffer ();
		public Cogl.PixelFormat get_format ();
		public int get_height ();
		public int get_rowstride ();
		public static Cogl.Bool get_size_from_file (string filename, out int width, out int height);
		public int get_width ();
		[CCode (has_construct_function = false)]
		public Bitmap.with_size (Cogl.Context context, uint width, uint height, Cogl.PixelFormat format);
	}
	[CCode (cheader_filename = "cogl/cogl.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "cogl_color_get_gtype ()")]
	[Compact]
	public class Color {
		[CCode (has_construct_function = false)]
		public Color ();
		public Cogl.Color copy ();
		public static Cogl.Bool equal (void* v1, void* v2);
		public void free ();
		public float get_alpha ();
		public uint8 get_alpha_byte ();
		public float get_alpha_float ();
		public float get_blue ();
		public uint8 get_blue_byte ();
		public float get_blue_float ();
		public float get_green ();
		public uint8 get_green_byte ();
		public float get_green_float ();
		public float get_red ();
		public uint8 get_red_byte ();
		public float get_red_float ();
		public void init_from_4f (float red, float green, float blue, float alpha);
		public void init_from_4fv (float color_array);
		public void init_from_4ub (uint8 red, uint8 green, uint8 blue, uint8 alpha);
		public static void init_from_hsl (out unowned Cogl.Color color, float hue, float saturation, float luminance);
		public void premultiply ();
		public void set_alpha (float alpha);
		public void set_alpha_byte (uint8 alpha);
		public void set_alpha_float (float alpha);
		public void set_blue (float blue);
		public void set_blue_byte (uint8 blue);
		public void set_blue_float (float blue);
		[Deprecated (since = "1.4")]
		public void set_from_4f (float red, float green, float blue, float alpha);
		[Deprecated (since = "1.4")]
		public void set_from_4ub (uint8 red, uint8 green, uint8 blue, uint8 alpha);
		public void set_green (float green);
		public void set_green_byte (uint8 green);
		public void set_green_float (float green);
		public void set_red (float red);
		public void set_red_byte (uint8 red);
		public void set_red_float (float red);
		public void to_hsl (out float hue, out float saturation, out float luminance);
		public void unpremultiply ();
	}
	[CCode (cheader_filename = "cogl/cogl.h", type_id = "cogl_context_get_gtype ()")]
	public class Context : Cogl.Object {
		[CCode (has_construct_function = false)]
		public Context (Cogl.Display? display) throws GLib.Error;
		public unowned Cogl.Display get_display ();
		public unowned Cogl.Renderer get_renderer ();
	}
	[CCode (cheader_filename = "cogl/cogl.h", type_id = "cogl_display_get_gtype ()")]
	public class Display : Cogl.Object {
		[CCode (has_construct_function = false)]
		public Display (Cogl.Renderer renderer, Cogl.OnscreenTemplate onscreen_template);
		public unowned Cogl.Renderer get_renderer ();
		public void set_onscreen_template (Cogl.OnscreenTemplate onscreen_template);
		public Cogl.Bool setup () throws GLib.Error;
	}
	[CCode (cheader_filename = "cogl/cogl.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "cogl_euler_get_gtype ()")]
	[Compact]
	public class Euler {
		public float heading;
		public float pitch;
		public float roll;
		public Cogl.Euler copy ();
		public static Cogl.Bool equal (void* v1, void* v2);
		public void free ();
		public void init (float heading, float pitch, float roll);
		public void init_from_matrix (Cogl.Matrix matrix);
		public void init_from_quaternion (Cogl.Quaternion quaternion);
	}
	[CCode (cheader_filename = "cogl/cogl.h")]
	[Compact]
	public class Fence {
	}
	[CCode (cheader_filename = "cogl/cogl.h")]
	[Compact]
	public class FenceClosure {
	}
	[CCode (cheader_filename = "cogl/cogl.h", type_id = "cogl_fixed_get_type ()")]
	public class Fixed {
		[CCode (has_construct_function = false)]
		protected Fixed ();
	}
	[CCode (cheader_filename = "cogl/cogl.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "cogl_frame_closure_get_gtype ()")]
	[Compact]
	public class FrameClosure {
	}
	[CCode (cheader_filename = "cogl/cogl.h", type_id = "cogl_frame_info_get_gtype ()")]
	public class FrameInfo : Cogl.Object {
		[CCode (has_construct_function = false)]
		protected FrameInfo ();
		public int64 get_frame_counter ();
		public unowned Cogl.Output get_output ();
		public int64 get_presentation_time ();
		public float get_refresh_rate ();
	}
	[CCode (cheader_filename = "cogl/cogl.h", lower_case_csuffix = "gles2_context", type_id = "cogl_gles2_context_get_gtype ()")]
	public class GLES2Context : Cogl.Object {
		[CCode (has_construct_function = false)]
		public GLES2Context (Cogl.Context ctx) throws GLib.Error;
	}
	[CCode (cheader_filename = "cogl/cogl.h", type_id = "cogl_index_buffer_get_gtype ()")]
	public class IndexBuffer : Cogl.Object {
		[CCode (has_construct_function = false)]
		public IndexBuffer (Cogl.Context context, ulong bytes);
	}
	[CCode (cheader_filename = "cogl/cogl.h", type_id = "cogl_indices_get_gtype ()")]
	public class Indices : Cogl.Object {
		[CCode (has_construct_function = false)]
		public Indices (Cogl.Context context, Cogl.IndicesType type, void* indices_data, int n_indices);
		[CCode (has_construct_function = false)]
		public Indices.for_buffer (Cogl.IndicesType type, Cogl.IndexBuffer buffer, ulong offset);
		public ulong get_offset ();
		public Cogl.IndicesType get_type ();
		public void set_offset (ulong offset);
	}
	[CCode (cheader_filename = "cogl/cogl.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "cogl_matrix_get_gtype ()")]
	[Compact]
	public class Matrix {
		public float ww;
		public float wx;
		public float wy;
		public float wz;
		public float xw;
		public float xx;
		public float xy;
		public float xz;
		public float yw;
		public float yx;
		public float yy;
		public float yz;
		public float zw;
		public float zx;
		public float zy;
		public float zz;
		public Cogl.Matrix copy ();
		public static Cogl.Bool equal (void* v1, void* v2);
		public void free ();
		public void frustum (float left, float right, float bottom, float top, float z_near, float z_far);
		public float get_array ();
		public Cogl.Bool get_inverse (out unowned Cogl.Matrix inverse);
		public void init_from_array (float array);
		public void init_from_euler (Cogl.Euler euler);
		public void init_from_quaternion (Cogl.Quaternion quaternion);
		public void init_identity ();
		public void init_translation (float tx, float ty, float tz);
		public Cogl.Bool is_identity ();
		public void look_at (float eye_position_x, float eye_position_y, float eye_position_z, float object_x, float object_y, float object_z, float world_up_x, float world_up_y, float world_up_z);
		public void multiply (Cogl.Matrix a, Cogl.Matrix b);
		[Deprecated (since = "1.10")]
		public void ortho (float left, float right, float bottom, float top, float near, float far);
		public void orthographic (float x_1, float y_1, float x_2, float y_2, float near, float far);
		public void perspective (float fov_y, float aspect, float z_near, float z_far);
		public void project_points (int n_components, ulong stride_in, void* points_in, ulong stride_out, void* points_out, int n_points);
		public void rotate (float angle, float x, float y, float z);
		public void rotate_euler (Cogl.Euler euler);
		public void rotate_quaternion (Cogl.Quaternion quaternion);
		public void scale (float sx, float sy, float sz);
		public void transform_point (ref float x, ref float y, ref float z, ref float w);
		public void transform_points (int n_components, ulong stride_in, void* points_in, ulong stride_out, void* points_out, int n_points);
		public void translate (float x, float y, float z);
		public void transpose ();
		public void view_2d_in_frustum (float left, float right, float bottom, float top, float z_near, float z_2d, float width_2d, float height_2d);
		public void view_2d_in_perspective (float fov_y, float aspect, float z_near, float z_2d, float width_2d, float height_2d);
	}
	[CCode (cheader_filename = "cogl/cogl.h", ref_function = "cogl_matrix_entry_ref", type_id = "cogl_matrix_entry_get_gtype ()", unref_function = "cogl_matrix_entry_unref")]
	[Compact]
	public class MatrixEntry {
		public Cogl.Bool calculate_translation (Cogl.MatrixEntry entry1, out float x, out float y, out float z);
		public Cogl.Bool equal (Cogl.MatrixEntry entry1);
		public Cogl.Matrix @get (out unowned Cogl.Matrix matrix);
		public Cogl.Bool is_identity ();
		public Cogl.MatrixEntry @ref ();
		public void unref ();
	}
	[CCode (cheader_filename = "cogl/cogl.h", type_id = "cogl_matrix_stack_get_gtype ()")]
	public class MatrixStack : Cogl.Object {
		[CCode (has_construct_function = false)]
		public MatrixStack (Cogl.Context ctx);
		public void frustum (float left, float right, float bottom, float top, float z_near, float z_far);
		public Cogl.Matrix @get (out unowned Cogl.Matrix matrix);
		public unowned Cogl.MatrixEntry get_entry ();
		public Cogl.Bool get_inverse (out unowned Cogl.Matrix inverse);
		public void load_identity ();
		public void multiply (Cogl.Matrix matrix);
		public void orthographic (float x_1, float y_1, float x_2, float y_2, float near, float far);
		public void perspective (float fov_y, float aspect, float z_near, float z_far);
		public void pop ();
		public void push ();
		public void rotate (float angle, float x, float y, float z);
		public void rotate_euler (Cogl.Euler euler);
		public void rotate_quaternion (Cogl.Quaternion quaternion);
		public void scale (float x, float y, float z);
		public void @set (Cogl.Matrix matrix);
		public void translate (float x, float y, float z);
	}
	[CCode (cheader_filename = "cogl/cogl.h", type_id = "cogl_object_get_gtype ()")]
	public abstract class Object {
		[CCode (has_construct_function = false)]
		protected Object ();
		public static void value_set_object (GLib.Value value, void* object);
	}
	[CCode (cheader_filename = "cogl/cogl.h", type_id = "cogl_onscreen_get_gtype ()")]
	public class Onscreen : Cogl.Object, Cogl.Framebuffer {
		[CCode (has_construct_function = false)]
		public Onscreen (Cogl.Context context, int width, int height);
		public Cogl.OnscreenDirtyClosure add_dirty_callback ([CCode (delegate_target_pos = 1.5)] Cogl.OnscreenDirtyCallback callback, Cogl.UserDataDestroyCallback? destroy);
		public Cogl.FrameClosure add_frame_callback ([CCode (delegate_target_pos = 1.5)] Cogl.FrameCallback callback, Cogl.UserDataDestroyCallback? destroy);
		public Cogl.OnscreenResizeClosure add_resize_callback ([CCode (delegate_target_pos = 1.5)] Cogl.OnscreenResizeCallback callback, Cogl.UserDataDestroyCallback? destroy);
		[Deprecated (since = "1.14")]
		public uint add_swap_buffers_callback (Cogl.SwapBuffersNotify callback);
		public int get_buffer_age ();
		public int64 get_frame_counter ();
		public Cogl.Bool get_resizable ();
		public void hide ();
		public void remove_dirty_callback (Cogl.OnscreenDirtyClosure closure);
		public void remove_frame_callback (Cogl.FrameClosure closure);
		public void remove_resize_callback (Cogl.OnscreenResizeClosure closure);
		[Deprecated (since = "1.14")]
		public void remove_swap_buffers_callback (uint id);
		public void set_resizable (Cogl.Bool resizable);
		public void set_swap_throttled (Cogl.Bool throttled);
		public void show ();
		public void swap_buffers ();
		public void swap_buffers_with_damage (int rectangles, int n_rectangles);
		public void swap_region (int rectangles, int n_rectangles);
	}
	[CCode (cheader_filename = "cogl/cogl.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "cogl_onscreen_dirty_closure_get_gtype ()")]
	[Compact]
	public class OnscreenDirtyClosure {
	}
	[CCode (cheader_filename = "cogl/cogl.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "cogl_onscreen_resize_closure_get_gtype ()")]
	[Compact]
	public class OnscreenResizeClosure {
	}
	[CCode (cheader_filename = "cogl/cogl.h", type_id = "cogl_onscreen_template_get_gtype ()")]
	public class OnscreenTemplate : Cogl.Object {
		[CCode (has_construct_function = false)]
		public OnscreenTemplate (Cogl.SwapChain swap_chain);
		public void set_samples_per_pixel (int n);
		public void set_swap_throttled (Cogl.Bool throttled);
	}
	[CCode (cheader_filename = "cogl/cogl.h", type_id = "cogl_output_get_gtype ()")]
	public class Output : Cogl.Object {
		[CCode (has_construct_function = false)]
		protected Output ();
		public int get_height ();
		public int get_mm_height ();
		public int get_mm_width ();
		public float get_refresh_rate ();
		public Cogl.SubpixelOrder get_subpixel_order ();
		public int get_width ();
		public int get_x ();
		public int get_y ();
	}
	[CCode (cheader_filename = "cogl/cogl.h", type_id = "cogl_pipeline_get_gtype ()")]
	public class Pipeline : Cogl.Object {
		[CCode (has_construct_function = false)]
		public Pipeline (Cogl.Context context);
		public void add_layer_snippet (int layer, Cogl.Snippet snippet);
		public void add_snippet (Cogl.Snippet snippet);
		public Cogl.Pipeline copy ();
		public void foreach_layer (Cogl.PipelineLayerCallback callback);
		public Cogl.PipelineAlphaFunc get_alpha_test_function ();
		public float get_alpha_test_reference ();
		public void get_ambient (Cogl.Color ambient);
		public void get_color (out unowned Cogl.Color color);
		public Cogl.ColorMask get_color_mask ();
		public Cogl.PipelineCullFaceMode get_cull_face_mode ();
		public Cogl.DepthState get_depth_state ();
		public void get_diffuse (Cogl.Color diffuse);
		public void get_emission (Cogl.Color emission);
		public Cogl.Winding get_front_face_winding ();
		public Cogl.PipelineFilter get_layer_mag_filter (int layer_index);
		public Cogl.PipelineFilter get_layer_min_filter (int layer_index);
		public Cogl.Bool get_layer_point_sprite_coords_enabled (int layer_index);
		public unowned Cogl.Texture get_layer_texture (int layer_index);
		public Cogl.PipelineWrapMode get_layer_wrap_mode_p (int layer_index);
		public Cogl.PipelineWrapMode get_layer_wrap_mode_s (int layer_index);
		public Cogl.PipelineWrapMode get_layer_wrap_mode_t (int layer_index);
		public int get_n_layers ();
		public Cogl.Bool get_per_vertex_point_size ();
		public float get_point_size ();
		public float get_shininess ();
		public void get_specular (Cogl.Color specular);
		public int get_uniform_location (string uniform_name);
		public Cogl.Handle get_user_program ();
		public void remove_layer (int layer_index);
		public void set_alpha_test_function (Cogl.PipelineAlphaFunc alpha_func, float alpha_reference);
		public void set_ambient (Cogl.Color ambient);
		public void set_ambient_and_diffuse (Cogl.Color color);
		public Cogl.Bool set_blend (string blend_string) throws GLib.Error;
		public void set_blend_constant (Cogl.Color constant_color);
		public void set_color (Cogl.Color color);
		public void set_color4f (float red, float green, float blue, float alpha);
		public void set_color4ub (uint8 red, uint8 green, uint8 blue, uint8 alpha);
		public void set_color_mask (Cogl.ColorMask color_mask);
		public void set_cull_face_mode (Cogl.PipelineCullFaceMode cull_face_mode);
		public Cogl.Bool set_depth_state (Cogl.DepthState state) throws GLib.Error;
		public void set_diffuse (Cogl.Color diffuse);
		public void set_emission (Cogl.Color emission);
		public void set_front_face_winding (Cogl.Winding front_winding);
		public Cogl.Bool set_layer_combine (int layer_index, string blend_string) throws GLib.Error;
		public void set_layer_combine_constant (int layer_index, Cogl.Color constant);
		public void set_layer_filters (int layer_index, Cogl.PipelineFilter min_filter, Cogl.PipelineFilter mag_filter);
		public void set_layer_matrix (int layer_index, Cogl.Matrix matrix);
		public void set_layer_null_texture (int layer_index, Cogl.TextureType texture_type);
		public Cogl.Bool set_layer_point_sprite_coords_enabled (int layer_index, Cogl.Bool enable) throws GLib.Error;
		public void set_layer_texture (int layer_index, Cogl.Texture texture);
		public void set_layer_wrap_mode (int layer_index, Cogl.PipelineWrapMode mode);
		public void set_layer_wrap_mode_p (int layer_index, Cogl.PipelineWrapMode mode);
		public void set_layer_wrap_mode_s (int layer_index, Cogl.PipelineWrapMode mode);
		public void set_layer_wrap_mode_t (int layer_index, Cogl.PipelineWrapMode mode);
		public Cogl.Bool set_per_vertex_point_size (Cogl.Bool enable) throws GLib.Error;
		public void set_point_size (float point_size);
		public void set_shininess (float shininess);
		public void set_specular (Cogl.Color specular);
		public void set_uniform_1f (int uniform_location, float value);
		public void set_uniform_1i (int uniform_location, int value);
		public void set_uniform_float (int uniform_location, int n_components, int count, float value);
		public void set_uniform_int (int uniform_location, int n_components, int count, int value);
		public void set_uniform_matrix (int uniform_location, int dimensions, int count, Cogl.Bool transpose, float value);
		public void set_user_program (Cogl.Handle program);
	}
	[CCode (cheader_filename = "cogl/cogl.h", type_id = "cogl_pixel_buffer_get_gtype ()")]
	public class PixelBuffer : Cogl.Object {
		[CCode (has_construct_function = false)]
		public PixelBuffer (Cogl.Context context, ulong size, void* data);
	}
	[CCode (cheader_filename = "cogl/cogl.h", type_id = "cogl_primitive_get_gtype ()")]
	public class Primitive : Cogl.Object {
		[CCode (has_construct_function = false)]
		protected Primitive ();
		public Cogl.Primitive copy ();
		public void draw (Cogl.Framebuffer framebuffer, Cogl.Pipeline pipeline);
		public void foreach_attribute (Cogl.PrimitiveAttributeCallback callback);
		public int get_first_vertex ();
		public unowned Cogl.Indices get_indices ();
		public Cogl.VerticesMode get_mode ();
		public int get_n_vertices ();
		[CCode (has_construct_function = false)]
		public Primitive.p2 (Cogl.Context context, Cogl.VerticesMode mode, [CCode (array_length_cname = "n_vertices", array_length_pos = 2.5)] Cogl.VertexP2[] data);
		[CCode (has_construct_function = false)]
		public Primitive.p2c4 (Cogl.Context context, Cogl.VerticesMode mode, [CCode (array_length_cname = "n_vertices", array_length_pos = 2.5)] Cogl.VertexP2C4[] data);
		[CCode (has_construct_function = false)]
		public Primitive.p2t2 (Cogl.Context context, Cogl.VerticesMode mode, [CCode (array_length_cname = "n_vertices", array_length_pos = 2.5)] Cogl.VertexP2T2[] data);
		[CCode (has_construct_function = false)]
		public Primitive.p2t2c4 (Cogl.Context context, Cogl.VerticesMode mode, [CCode (array_length_cname = "n_vertices", array_length_pos = 2.5)] Cogl.VertexP2T2C4[] data);
		[CCode (has_construct_function = false)]
		public Primitive.p3 (Cogl.Context context, Cogl.VerticesMode mode, [CCode (array_length_cname = "n_vertices", array_length_pos = 2.5)] Cogl.VertexP3[] data);
		[CCode (has_construct_function = false)]
		public Primitive.p3c4 (Cogl.Context context, Cogl.VerticesMode mode, [CCode (array_length_cname = "n_vertices", array_length_pos = 2.5)] Cogl.VertexP3C4[] data);
		[CCode (has_construct_function = false)]
		public Primitive.p3t2 (Cogl.Context context, Cogl.VerticesMode mode, [CCode (array_length_cname = "n_vertices", array_length_pos = 2.5)] Cogl.VertexP3T2[] data);
		[CCode (has_construct_function = false)]
		public Primitive.p3t2c4 (Cogl.Context context, Cogl.VerticesMode mode, [CCode (array_length_cname = "n_vertices", array_length_pos = 2.5)] Cogl.VertexP3T2C4[] data);
		public void set_attributes (Cogl.Attribute attributes, int n_attributes);
		public void set_first_vertex (int first_vertex);
		public void set_indices (Cogl.Indices indices, int n_indices);
		public void set_mode (Cogl.VerticesMode mode);
		public void set_n_vertices (int n_vertices);
		public static void texture_set_auto_mipmap (Cogl.PrimitiveTexture primitive_texture, Cogl.Bool value);
		[CCode (has_construct_function = false)]
		public Primitive.with_attributes (Cogl.VerticesMode mode, int n_vertices, Cogl.Attribute attributes, int n_attributes);
	}
	[CCode (cheader_filename = "cogl/cogl.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "cogl_quaternion_get_gtype ()")]
	[Compact]
	public class Quaternion {
		public float w;
		public float x;
		public float y;
		public float z;
		public Cogl.Quaternion copy ();
		public float dot_product (Cogl.Quaternion b);
		public static Cogl.Bool equal (void* v1, void* v2);
		public void free ();
		public float get_rotation_angle ();
		public void get_rotation_axis (out float vector3);
		public void init (float angle, float x, float y, float z);
		public void init_from_angle_vector (float angle, float axis3f);
		public void init_from_array (float array);
		public void init_from_euler (Cogl.Euler euler);
		public void init_from_matrix (Cogl.Matrix matrix);
		public void init_from_quaternion (Cogl.Quaternion src);
		public void init_from_x_rotation (float angle);
		public void init_from_y_rotation (float angle);
		public void init_from_z_rotation (float angle);
		public void init_identity ();
		public void invert ();
		public void multiply (Cogl.Quaternion left, Cogl.Quaternion right);
		public void nlerp (Cogl.Quaternion a, Cogl.Quaternion b, float t);
		public void normalize ();
		public void pow (float exponent);
		public void slerp (Cogl.Quaternion a, Cogl.Quaternion b, float t);
		public void squad (Cogl.Quaternion prev, Cogl.Quaternion a, Cogl.Quaternion b, Cogl.Quaternion next, float t);
	}
	[CCode (cheader_filename = "cogl/cogl.h", type_id = "cogl_renderer_get_gtype ()")]
	public class Renderer : Cogl.Object {
		[CCode (has_construct_function = false)]
		public Renderer ();
		public void add_constraint (Cogl.RendererConstraint constraint);
		public Cogl.Bool check_onscreen_template (Cogl.OnscreenTemplate onscreen_template) throws GLib.Error;
		public Cogl.Bool connect () throws GLib.Error;
		public void foreach_output (Cogl.OutputCallback callback);
		public Cogl.Driver get_driver ();
		public int get_n_fragment_texture_units ();
		public Cogl.WinsysID get_winsys_id ();
		public void remove_constraint (Cogl.RendererConstraint constraint);
		public void set_driver (Cogl.Driver driver);
		public void set_winsys_id (Cogl.WinsysID winsys_id);
	}
	[CCode (cheader_filename = "cogl/cogl.h", type_id = "cogl_snippet_get_gtype ()")]
	public class Snippet : Cogl.Object {
		[CCode (has_construct_function = false)]
		public Snippet (Cogl.SnippetHook hook, string declarations, string post);
		public unowned string get_declarations ();
		public Cogl.SnippetHook get_hook ();
		public unowned string get_post ();
		public unowned string get_pre ();
		public unowned string get_replace ();
		public void set_declarations (string declarations);
		public void set_post (string post);
		public void set_pre (string pre);
		public void set_replace (string replace);
	}
	[CCode (cheader_filename = "cogl/cogl.h", type_id = "cogl_sub_texture_get_gtype ()")]
	public class SubTexture : Cogl.Object {
		[CCode (has_construct_function = false)]
		public SubTexture (Cogl.Context ctx, Cogl.Texture parent_texture, int sub_x, int sub_y, int sub_width, int sub_height);
		public unowned Cogl.Texture get_parent ();
	}
	[CCode (cheader_filename = "cogl/cogl.h", type_id = "cogl_swap_chain_get_gtype ()")]
	public class SwapChain : Cogl.Object {
		[CCode (has_construct_function = false)]
		public SwapChain ();
		public void set_has_alpha (Cogl.Bool has_alpha);
		public void set_length (int length);
	}
	[CCode (cheader_filename = "cogl/cogl.h", lower_case_csuffix = "texture_2d", type_id = "cogl_texture_2d_get_gtype ()")]
	public class Texture2D : Cogl.Object, Cogl.Texture {
		[CCode (has_construct_function = false)]
		protected Texture2D ();
		[CCode (has_construct_function = false)]
		public Texture2D.from_bitmap (Cogl.Bitmap bitmap);
		[CCode (has_construct_function = false)]
		public Texture2D.from_data (Cogl.Context ctx, int width, int height, Cogl.PixelFormat format, int rowstride, uint8 data) throws GLib.Error;
		[CCode (has_construct_function = false)]
		public Texture2D.from_file (Cogl.Context ctx, string filename) throws GLib.Error;
		[CCode (cname = "cogl_texture_2d_gl_new_from_foreign", has_construct_function = false)]
		public Texture2D.gl_new_from_foreign (Cogl.Context ctx, uint gl_handle, int width, int height, Cogl.PixelFormat format);
		[CCode (has_construct_function = false)]
		public Texture2D.with_size (Cogl.Context ctx, int width, int height);
	}
	[CCode (cheader_filename = "cogl/cogl.h", lower_case_csuffix = "texture_2d_sliced", type_id = "cogl_texture_2d_sliced_get_gtype ()")]
	public class Texture2DSliced : Cogl.Object, Cogl.Texture {
		[CCode (has_construct_function = false)]
		protected Texture2DSliced ();
		[CCode (has_construct_function = false)]
		public Texture2DSliced.from_bitmap (Cogl.Bitmap bmp, int max_waste);
		[CCode (has_construct_function = false)]
		public Texture2DSliced.from_data (Cogl.Context ctx, int width, int height, int max_waste, Cogl.PixelFormat format, int rowstride, uint8 data) throws GLib.Error;
		[CCode (has_construct_function = false)]
		public Texture2DSliced.from_file (Cogl.Context ctx, string filename, int max_waste) throws GLib.Error;
		[CCode (has_construct_function = false)]
		public Texture2DSliced.with_size (Cogl.Context ctx, int width, int height, int max_waste);
	}
	[CCode (cheader_filename = "cogl/cogl.h", lower_case_csuffix = "texture_3d", type_id = "cogl_texture_3d_get_gtype ()")]
	public class Texture3D : Cogl.Object, Cogl.Texture {
		[CCode (has_construct_function = false)]
		protected Texture3D ();
		[CCode (has_construct_function = false)]
		public Texture3D.from_bitmap (Cogl.Bitmap bitmap, int height, int depth);
		[CCode (has_construct_function = false)]
		public Texture3D.from_data (Cogl.Context context, int width, int height, int depth, Cogl.PixelFormat format, int rowstride, int image_stride, uint8 data) throws GLib.Error;
		[CCode (has_construct_function = false)]
		public Texture3D.with_size (Cogl.Context context, int width, int height, int depth);
	}
	[CCode (cheader_filename = "cogl/cogl.h", type_id = "cogl_texture_pixmap_x11_get_gtype ()")]
	public class TexturePixmapX11 : Cogl.Object {
		[CCode (has_construct_function = false)]
		public TexturePixmapX11 (Cogl.Context context, uint32 pixmap, Cogl.Bool automatic_updates) throws GLib.Error;
		public static uint32 error_quark ();
		public Cogl.Bool is_using_tfp_extension ();
		public void set_damage_object (uint32 damage, Cogl.TexturePixmapX11ReportLevel report_level);
		public void update_area (int x, int y, int width, int height);
	}
	[CCode (cheader_filename = "cogl/cogl.h", type_id = "cogl_texture_rectangle_get_gtype ()")]
	public class TextureRectangle : Cogl.Object, Cogl.Texture {
		[CCode (has_construct_function = false)]
		protected TextureRectangle ();
		[CCode (has_construct_function = false)]
		public TextureRectangle.from_bitmap (Cogl.Bitmap bitmap);
		[CCode (has_construct_function = false)]
		public TextureRectangle.from_foreign (Cogl.Context ctx, uint gl_handle, int width, int height, Cogl.PixelFormat format);
		[CCode (has_construct_function = false)]
		public TextureRectangle.with_size (Cogl.Context ctx, int width, int height);
	}
	[CCode (cheader_filename = "cogl/cogl.h", type_id = "cogl_framebuffer_get_gtype ()")]
	public interface Framebuffer : Cogl.Object {
		public Cogl.Bool allocate () throws GLib.Error;
		public void cancel_fence_callback (Cogl.FenceClosure closure);
		public void clear (ulong buffers, Cogl.Color color);
		public void clear4f (ulong buffers, float red, float green, float blue, float alpha);
		public void discard_buffers (ulong buffers);
		[Deprecated (since = "1.16")]
		public void draw_attributes (Cogl.Pipeline pipeline, Cogl.VerticesMode mode, int first_vertex, int n_vertices, Cogl.Attribute attributes, int n_attributes);
		[Deprecated (since = "1.16")]
		public void draw_indexed_attributes (Cogl.Pipeline pipeline, Cogl.VerticesMode mode, int first_vertex, int n_vertices, Cogl.Indices indices, Cogl.Attribute attributes, int n_attributes);
		public void draw_multitextured_rectangle (Cogl.Pipeline pipeline, float x_1, float y_1, float x_2, float y_2, [CCode (array_length = false)] float[] tex_coords, int tex_coords_len);
		[Deprecated (since = "1.16")]
		public void draw_primitive (Cogl.Pipeline pipeline, Cogl.Primitive primitive);
		public void draw_rectangle (Cogl.Pipeline pipeline, float x_1, float y_1, float x_2, float y_2);
		public void draw_rectangles (Cogl.Pipeline pipeline, [CCode (array_length = false)] float[] coordinates, uint n_rectangles);
		public void draw_textured_rectangle (Cogl.Pipeline pipeline, float x_1, float y_1, float x_2, float y_2, float s_1, float t_1, float s_2, float t_2);
		public void draw_textured_rectangles (Cogl.Pipeline pipeline, [CCode (array_length = false)] float[] coordinates, uint n_rectangles);
		public static uint32 error_quark ();
		public void finish ();
		public void frustum (float left, float right, float bottom, float top, float z_near, float z_far);
		public int get_alpha_bits ();
		public int get_blue_bits ();
		public Cogl.ColorMask get_color_mask ();
		public unowned Cogl.Context get_context ();
		public int get_depth_bits ();
		public unowned Cogl.Texture get_depth_texture ();
		public Cogl.Bool get_depth_texture_enabled ();
		public Cogl.Bool get_depth_write_enabled ();
		public Cogl.Bool get_dither_enabled ();
		public int get_green_bits ();
		public int get_height ();
		public void get_modelview_matrix (out unowned Cogl.Matrix matrix);
		public void get_projection_matrix (out unowned Cogl.Matrix matrix);
		public int get_red_bits ();
		public int get_samples_per_pixel ();
		public void get_viewport4fv ([CCode (array_length = false)] out unowned float[] viewport);
		public float get_viewport_height ();
		public float get_viewport_width ();
		public float get_viewport_x ();
		public float get_viewport_y ();
		public int get_width ();
		public void identity_matrix ();
		public void orthographic (float x_1, float y_1, float x_2, float y_2, float near, float far);
		public void perspective (float fov_y, float aspect, float z_near, float z_far);
		public void pop_clip ();
		public void pop_matrix ();
		public void push_matrix ();
		public void push_primitive_clip (Cogl.Primitive primitive, float bounds_x1, float bounds_y1, float bounds_x2, float bounds_y2);
		public void push_rectangle_clip (float x_1, float y_1, float x_2, float y_2);
		public void push_scissor_clip (int x, int y, int width, int height);
		public Cogl.Bool read_pixels (int x, int y, int width, int height, Cogl.PixelFormat format, uint8 pixels);
		public Cogl.Bool read_pixels_into_bitmap (int x, int y, Cogl.ReadPixelsFlags source, Cogl.Bitmap bitmap);
		public void resolve_samples ();
		public void resolve_samples_region (int x, int y, int width, int height);
		public void rotate (float angle, float x, float y, float z);
		public void rotate_euler (Cogl.Euler euler);
		public void rotate_quaternion (Cogl.Quaternion quaternion);
		public void scale (float x, float y, float z);
		public void set_color_mask (Cogl.ColorMask color_mask);
		public void set_depth_texture_enabled (Cogl.Bool enabled);
		public void set_depth_write_enabled (Cogl.Bool depth_write_enabled);
		public void set_dither_enabled (Cogl.Bool dither_enabled);
		public void set_modelview_matrix (Cogl.Matrix matrix);
		public void set_projection_matrix (Cogl.Matrix matrix);
		public void set_samples_per_pixel (int samples_per_pixel);
		public void set_viewport (float x, float y, float width, float height);
		public void transform (Cogl.Matrix matrix);
		public void translate (float x, float y, float z);
	}
	[CCode (cheader_filename = "cogl/cogl.h", type_id = "cogl_texture_get_gtype ()")]
	public interface Texture : Cogl.Object {
		public Cogl.Bool allocate () throws GLib.Error;
		public Cogl.TextureComponents get_components ();
		public int get_data (Cogl.PixelFormat format, uint rowstride, uint8 data);
		public Cogl.Bool get_gl_texture (out uint out_gl_handle, out uint out_gl_target);
		public uint get_height ();
		public int get_max_waste ();
		public Cogl.Bool get_premultiplied ();
		public uint get_width ();
		public Cogl.Bool is_sliced ();
		public void set_components (Cogl.TextureComponents components);
		public Cogl.Bool set_data (Cogl.PixelFormat format, int rowstride, uint8 data, int level) throws GLib.Error;
		public void set_premultiplied (Cogl.Bool premultiplied);
		public Cogl.Bool set_region (int src_x, int src_y, int dst_x, int dst_y, uint dst_width, uint dst_height, int width, int height, Cogl.PixelFormat format, uint rowstride, uint8 data);
		public Cogl.Bool set_region_from_bitmap (int src_x, int src_y, int dst_x, int dst_y, uint dst_width, uint dst_height, Cogl.Bitmap bitmap);
	}
	[CCode (cheader_filename = "cogl/cogl.h")]
	[SimpleType]
	public struct Angle : int32 {
	}
	[CCode (cheader_filename = "cogl/cogl.h")]
	[SimpleType]
	public struct Bool : int {
	}
	[CCode (cheader_filename = "cogl/cogl.h")]
	[SimpleType]
	public struct Buffer {
		public static uint get_size (Cogl.Buffer buffer);
		public static Cogl.BufferUpdateHint get_update_hint (Cogl.Buffer buffer);
		public static void* map (Cogl.Buffer buffer, Cogl.BufferAccess access, Cogl.BufferMapHint hints);
		public static void* map_range (Cogl.Buffer buffer, ulong offset, ulong size, Cogl.BufferAccess access, Cogl.BufferMapHint hints) throws GLib.Error;
		public static Cogl.Bool set_data (Cogl.Buffer buffer, ulong offset, void* data, ulong size);
		public static void set_update_hint (Cogl.Buffer buffer, Cogl.BufferUpdateHint hint);
		public static void unmap (Cogl.Buffer buffer);
	}
	[CCode (cheader_filename = "cogl/cogl.h", has_type_id = false)]
	public struct DebugObjectTypeInfo {
		public weak string name;
		public uint instance_count;
	}
	[CCode (cheader_filename = "cogl/cogl.h", has_type_id = false)]
	public struct DepthState {
		public void get_range (float near_val, float far_val);
		public Cogl.Bool get_test_enabled ();
		public Cogl.DepthTestFunction get_test_function ();
		public Cogl.Bool get_write_enabled ();
		public void init ();
		public void set_range (float near_val, float far_val);
		public void set_test_enabled (Cogl.Bool enable);
		public void set_test_function (Cogl.DepthTestFunction function);
		public void set_write_enabled (Cogl.Bool enable);
	}
	[CCode (cheader_filename = "cogl/cogl.h", has_type_id = false)]
	public struct GtypeClass {
		public weak GLib.TypeClass base_class;
		public uint dummy;
	}
	[CCode (cheader_filename = "cogl/cogl.h")]
	[SimpleType]
	public struct Handle {
		public static GLib.Type get_type ();
		public static Cogl.Handle @ref (Cogl.Handle handle);
		public static void unref (Cogl.Handle handle);
	}
	[CCode (cheader_filename = "cogl/cogl.h", has_type_id = false)]
	public struct KmsCrtc {
		public uint32 id;
		public uint32 x;
		public uint32 y;
		public uint32 connectors;
		public uint32 count;
		public Cogl.Bool ignore;
	}
	[CCode (cheader_filename = "cogl/cogl.h")]
	[SimpleType]
	public struct MetaTexture {
	}
	[CCode (cheader_filename = "cogl/cogl.h", has_type_id = false)]
	public struct OnscreenDirtyInfo {
		public int x;
		public int y;
		public int width;
		public int height;
	}
	[CCode (cheader_filename = "cogl/cogl.h", has_type_id = false)]
	public struct PollFD {
		public int fd;
		public short events;
		public short revents;
	}
	[CCode (cheader_filename = "cogl/cogl.h")]
	[SimpleType]
	public struct PrimitiveTexture {
	}
	[CCode (cheader_filename = "cogl/cogl.h", has_type_id = false)]
	public struct TextureVertex {
		public float x;
		public float y;
		public float z;
		public float tx;
		public float ty;
		public weak Cogl.Color color;
	}
	[CCode (cheader_filename = "cogl/cogl.h", has_type_id = false)]
	public struct UserDataKey {
		public int unused;
	}
	[CCode (cheader_filename = "cogl/cogl.h", has_type_id = false)]
	public struct VertexP2 {
		public float x;
		public float y;
	}
	[CCode (cheader_filename = "cogl/cogl.h", has_type_id = false)]
	public struct VertexP2C4 {
		public float x;
		public float y;
		public uint8 r;
		public uint8 g;
		public uint8 b;
		public uint8 a;
	}
	[CCode (cheader_filename = "cogl/cogl.h", has_type_id = false)]
	public struct VertexP2T2 {
		public float x;
		public float y;
		public float s;
		public float t;
	}
	[CCode (cheader_filename = "cogl/cogl.h", has_type_id = false)]
	public struct VertexP2T2C4 {
		public float x;
		public float y;
		public float s;
		public float t;
		public uint8 r;
		public uint8 g;
		public uint8 b;
		public uint8 a;
	}
	[CCode (cheader_filename = "cogl/cogl.h", has_type_id = false)]
	public struct VertexP3 {
		public float x;
		public float y;
		public float z;
	}
	[CCode (cheader_filename = "cogl/cogl.h", has_type_id = false)]
	public struct VertexP3C4 {
		public float x;
		public float y;
		public float z;
		public uint8 r;
		public uint8 g;
		public uint8 b;
		public uint8 a;
	}
	[CCode (cheader_filename = "cogl/cogl.h", has_type_id = false)]
	public struct VertexP3T2 {
		public float x;
		public float y;
		public float z;
		public float s;
		public float t;
	}
	[CCode (cheader_filename = "cogl/cogl.h", has_type_id = false)]
	public struct VertexP3T2C4 {
		public float x;
		public float y;
		public float z;
		public float s;
		public float t;
		public uint8 r;
		public uint8 g;
		public uint8 b;
		public uint8 a;
	}
	[CCode (cheader_filename = "cogl/cogl.h", cname = "_CoglColorSizeCheck", has_type_id = false)]
	public struct _ColorSizeCheck {
		[CCode (array_length = false, array_null_terminated = true)]
		public weak char[] compile_time_assert_CoglColor_size;
	}
	[CCode (cheader_filename = "cogl/cogl.h", cname = "_CoglEulerSizeCheck", has_type_id = false)]
	public struct _EulerSizeCheck {
		[CCode (array_length = false, array_null_terminated = true)]
		public weak char[] compile_time_assert_CoglEuler_size;
	}
	[CCode (cheader_filename = "cogl/cogl.h", cname = "_CoglMatrixSizeCheck", has_type_id = false)]
	public struct _MatrixSizeCheck {
		[CCode (array_length = false, array_null_terminated = true)]
		public weak char[] compile_time_assert_CoglMatrix_size;
	}
	[CCode (cheader_filename = "cogl/cogl.h", cname = "_CoglQuaternionSizeCheck", has_type_id = false)]
	public struct _QuaternionSizeCheck {
		[CCode (array_length = false, array_null_terminated = true)]
		public weak char[] compile_time_assert_CoglQuaternion_size;
	}
	[CCode (cheader_filename = "cogl/cogl.h", cname = "_CoglTextureVertexSizeCheck", has_type_id = false)]
	public struct _TextureVertexSizeCheck {
		[CCode (array_length = false, array_null_terminated = true)]
		public weak char[] compile_time_assert_CoglTextureVertex_size;
	}
	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_ATTRIBUTE_TYPE_", type_id = "cogl_attribute_type_get_type ()")]
	public enum AttributeType {
		BYTE,
		UNSIGNED_BYTE,
		SHORT,
		UNSIGNED_SHORT,
		FLOAT
	}
	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_BITMAP_ERROR_", type_id = "cogl_bitmap_error_get_type ()")]
	public enum BitmapError {
		FAILED,
		UNKNOWN_TYPE,
		CORRUPT_IMAGE;
		public static uint32 quark ();
	}
	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_BLEND_STRING_ERROR_", type_id = "cogl_blend_string_error_get_type ()")]
	public enum BlendStringError {
		PARSE_ERROR,
		ARGUMENT_PARSE_ERROR,
		INVALID_ERROR,
		GPU_UNSUPPORTED_ERROR;
		public static uint32 quark ();
	}
	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_BUFFER_ACCESS_", has_type_id = false)]
	[Flags]
	public enum BufferAccess {
		READ,
		WRITE,
		READ_WRITE
	}
	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_BUFFER_BIT_", type_id = "cogl_buffer_bit_get_type ()")]
	[Flags]
	public enum BufferBit {
		COLOR,
		DEPTH,
		STENCIL
	}
	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_BUFFER_ERROR_", has_type_id = false)]
	public enum BufferError {
		[CCode (cname = "COGL_BUFFER_ERROR_MAP")]
		BUFFER_ERROR_MAP
	}
	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_BUFFER_MAP_HINT_", has_type_id = false)]
	[Flags]
	public enum BufferMapHint {
		DISCARD,
		DISCARD_RANGE
	}
	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_", type_id = "cogl_buffer_target_get_type ()")]
	[Flags]
	public enum BufferTarget {
		WINDOW_BUFFER,
		OFFSCREEN_BUFFER
	}
	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_BUFFER_UPDATE_HINT_", has_type_id = false)]
	public enum BufferUpdateHint {
		STATIC,
		DYNAMIC,
		STREAM
	}
	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_COLOR_MASK_", type_id = "cogl_color_mask_get_type ()")]
	[Flags]
	public enum ColorMask {
		NONE,
		RED,
		GREEN,
		BLUE,
		ALPHA,
		ALL
	}
	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_DEPTH_TEST_FUNCTION_", type_id = "cogl_depth_test_function_get_type ()")]
	public enum DepthTestFunction {
		NEVER,
		LESS,
		EQUAL,
		LEQUAL,
		GREATER,
		NOTEQUAL,
		GEQUAL,
		ALWAYS
	}
	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_DRIVER_", has_type_id = false)]
	public enum Driver {
		ANY,
		NOP,
		GL,
		GL3,
		GLES1,
		GLES2,
		WEBGL
	}
	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_FEATURE_", type_id = "cogl_feature_flags_get_type ()")]
	[Flags]
	public enum FeatureFlags {
		TEXTURE_RECTANGLE,
		TEXTURE_NPOT,
		TEXTURE_YUV,
		TEXTURE_READ_PIXELS,
		SHADERS_GLSL,
		OFFSCREEN,
		OFFSCREEN_MULTISAMPLE,
		OFFSCREEN_BLIT,
		FOUR_CLIP_PLANES,
		STENCIL_BUFFER,
		VBOS,
		PBOS,
		UNSIGNED_INT_INDICES,
		DEPTH_RANGE,
		TEXTURE_NPOT_BASIC,
		TEXTURE_NPOT_MIPMAP,
		TEXTURE_NPOT_REPEAT,
		POINT_SPRITE,
		TEXTURE_3D,
		SHADERS_ARBFP,
		MAP_BUFFER_FOR_READ,
		MAP_BUFFER_FOR_WRITE,
		ONSCREEN_MULTIPLE,
		DEPTH_TEXTURE
	}
	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_FEATURE_ID_", has_type_id = false)]
	public enum FeatureID {
		TEXTURE_NPOT_BASIC,
		TEXTURE_NPOT_MIPMAP,
		TEXTURE_NPOT_REPEAT,
		TEXTURE_NPOT,
		TEXTURE_RECTANGLE,
		TEXTURE_3D,
		GLSL,
		ARBFP,
		OFFSCREEN,
		OFFSCREEN_MULTISAMPLE,
		ONSCREEN_MULTIPLE,
		UNSIGNED_INT_INDICES,
		DEPTH_RANGE,
		POINT_SPRITE,
		MAP_BUFFER_FOR_READ,
		MAP_BUFFER_FOR_WRITE,
		MIRRORED_REPEAT,
		SWAP_BUFFERS_EVENT,
		GLES2_CONTEXT,
		DEPTH_TEXTURE,
		PRESENTATION_TIME,
		FENCE,
		PER_VERTEX_POINT_SIZE,
		TEXTURE_RG,
		BUFFER_AGE
	}
	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_FILTER_", has_type_id = false)]
	public enum FilterReturn {
		CONTINUE,
		REMOVE
	}
	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_FOG_MODE_", type_id = "cogl_fog_mode_get_type ()")]
	public enum FogMode {
		LINEAR,
		EXPONENTIAL,
		EXPONENTIAL_SQUARED
	}
	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_FRAME_EVENT_", has_type_id = false)]
	public enum FrameEvent {
		SYNC,
		COMPLETE
	}
	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_FRAMEBUFFER_ERROR_", has_type_id = false)]
	public enum FramebufferError {
		[CCode (cname = "COGL_FRAMEBUFFER_ERROR_ALLOCATE")]
		FRAMEBUFFER_ERROR_ALLOCATE;
		public static uint32 quark ();
	}
	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_GLES2_CONTEXT_ERROR_", has_type_id = false)]
	public enum GLES2ContextError {
		UNSUPPORTED,
		DRIVER
	}
	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_INDICES_TYPE_UNSIGNED_", type_id = "cogl_indices_type_get_type ()")]
	public enum IndicesType {
		BYTE,
		SHORT,
		INT
	}
	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_MATERIAL_ALPHA_FUNC_", type_id = "cogl_material_alpha_func_get_type ()")]
	public enum MaterialAlphaFunc {
		NEVER,
		LESS,
		EQUAL,
		LEQUAL,
		GREATER,
		NOTEQUAL,
		GEQUAL,
		ALWAYS
	}
	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_MATERIAL_FILTER_", type_id = "cogl_material_filter_get_type ()")]
	public enum MaterialFilter {
		NEAREST,
		LINEAR,
		NEAREST_MIPMAP_NEAREST,
		LINEAR_MIPMAP_NEAREST,
		NEAREST_MIPMAP_LINEAR,
		LINEAR_MIPMAP_LINEAR
	}
	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_MATERIAL_LAYER_TYPE_", type_id = "cogl_material_layer_type_get_type ()")]
	public enum MaterialLayerType {
		TEXTURE
	}
	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_MATERIAL_WRAP_MODE_", type_id = "cogl_material_wrap_mode_get_type ()")]
	public enum MaterialWrapMode {
		REPEAT,
		CLAMP_TO_EDGE,
		AUTOMATIC
	}
	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_PIPELINE_ALPHA_FUNC_", has_type_id = false)]
	public enum PipelineAlphaFunc {
		NEVER,
		LESS,
		EQUAL,
		LEQUAL,
		GREATER,
		NOTEQUAL,
		GEQUAL,
		ALWAYS
	}
	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_PIPELINE_CULL_FACE_MODE_", has_type_id = false)]
	public enum PipelineCullFaceMode {
		NONE,
		FRONT,
		BACK,
		BOTH
	}
	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_PIPELINE_FILTER_", has_type_id = false)]
	public enum PipelineFilter {
		NEAREST,
		LINEAR,
		NEAREST_MIPMAP_NEAREST,
		LINEAR_MIPMAP_NEAREST,
		NEAREST_MIPMAP_LINEAR,
		LINEAR_MIPMAP_LINEAR
	}
	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_PIPELINE_WRAP_MODE_", has_type_id = false)]
	public enum PipelineWrapMode {
		REPEAT,
		MIRRORED_REPEAT,
		CLAMP_TO_EDGE,
		AUTOMATIC
	}
	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_PIXEL_FORMAT_", type_id = "cogl_pixel_format_get_type ()")]
	public enum PixelFormat {
		ANY,
		A_8,
		RGB_565,
		RGBA_4444,
		RGBA_5551,
		YUV,
		G_8,
		RG_88,
		RGB_888,
		BGR_888,
		RGBA_8888,
		BGRA_8888,
		ARGB_8888,
		ABGR_8888,
		RGBA_1010102,
		BGRA_1010102,
		ARGB_2101010,
		ABGR_2101010,
		RGBA_8888_PRE,
		BGRA_8888_PRE,
		ARGB_8888_PRE,
		ABGR_8888_PRE,
		RGBA_4444_PRE,
		RGBA_5551_PRE,
		RGBA_1010102_PRE,
		BGRA_1010102_PRE,
		ARGB_2101010_PRE,
		ABGR_2101010_PRE,
		DEPTH_16,
		DEPTH_32,
		DEPTH_24_STENCIL_8
	}
	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_POLL_FD_EVENT_", has_type_id = false)]
	public enum PollFDEvent {
		IN,
		PRI,
		OUT,
		ERR,
		HUP,
		NVAL
	}
	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_READ_PIXELS_COLOR_", type_id = "cogl_read_pixels_flags_get_type ()")]
	[Flags]
	public enum ReadPixelsFlags {
		[CCode (cname = "COGL_READ_PIXELS_COLOR_BUFFER")]
		COLOR_BUFFER
	}
	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_RENDERER_CONSTRAINT_", has_type_id = false)]
	[Flags]
	public enum RendererConstraint {
		USES_X11,
		USES_XLIB,
		USES_EGL,
		SUPPORTS_COGL_GLES2
	}
	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_RENDERER_ERROR_", type_id = "cogl_renderer_error_get_type ()")]
	public enum RendererError {
		XLIB_DISPLAY_OPEN,
		BAD_CONSTRAINT;
		public static uint32 quark ();
	}
	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_SHADER_TYPE_", type_id = "cogl_shader_type_get_type ()")]
	public enum ShaderType {
		VERTEX,
		FRAGMENT
	}
	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_SNIPPET_HOOK_", has_type_id = false)]
	public enum SnippetHook {
		VERTEX,
		VERTEX_TRANSFORM,
		VERTEX_GLOBALS,
		POINT_SIZE,
		FRAGMENT,
		FRAGMENT_GLOBALS,
		TEXTURE_COORD_TRANSFORM,
		LAYER_FRAGMENT,
		TEXTURE_LOOKUP
	}
	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_SUBPIXEL_ORDER_", has_type_id = false)]
	public enum SubpixelOrder {
		UNKNOWN,
		NONE,
		HORIZONTAL_RGB,
		HORIZONTAL_BGR,
		VERTICAL_RGB,
		VERTICAL_BGR
	}
	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_SYSTEM_ERROR_", type_id = "cogl_system_error_get_type ()")]
	public enum SystemError {
		[CCode (cname = "COGL_SYSTEM_ERROR_UNSUPPORTED")]
		COGL_SYSTEM_ERROR_UNSUPPORTED,
		[CCode (cname = "COGL_SYSTEM_ERROR_NO_MEMORY")]
		COGL_SYSTEM_ERROR_NO_MEMORY
	}
	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_TEXTURE_COMPONENTS_", type_id = "cogl_texture_components_get_type ()")]
	public enum TextureComponents {
		A,
		RG,
		RGB,
		RGBA,
		DEPTH
	}
	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_TEXTURE_ERROR_", type_id = "cogl_texture_error_get_type ()")]
	public enum TextureError {
		SIZE,
		FORMAT,
		BAD_PARAMETER,
		TYPE;
		public static uint32 quark ();
	}
	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_TEXTURE_", type_id = "cogl_texture_flags_get_type ()")]
	[Flags]
	public enum TextureFlags {
		NONE,
		NO_AUTO_MIPMAP,
		NO_SLICING,
		NO_ATLAS
	}
	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_TEXTURE_PIXMAP_X11_ERROR_", has_type_id = false)]
	public enum TexturePixmapX11Error {
		[CCode (cname = "COGL_TEXTURE_PIXMAP_X11_ERROR_X11")]
		TEXTURE_PIXMAP_X11_ERROR_X11
	}
	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_TEXTURE_PIXMAP_X11_DAMAGE_", has_type_id = false)]
	public enum TexturePixmapX11ReportLevel {
		RAW_RECTANGLES,
		DELTA_RECTANGLES,
		BOUNDING_BOX,
		NON_EMPTY
	}
	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_TEXTURE_TYPE_", type_id = "cogl_texture_type_get_type ()")]
	public enum TextureType {
		@2D,
		@3D,
		RECTANGLE
	}
	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_VERTICES_MODE_", type_id = "cogl_vertices_mode_get_type ()")]
	public enum VerticesMode {
		POINTS,
		LINES,
		LINE_LOOP,
		LINE_STRIP,
		TRIANGLES,
		TRIANGLE_STRIP,
		TRIANGLE_FAN
	}
	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_WINDING_", type_id = "cogl_winding_get_type ()")]
	public enum Winding {
		CLOCKWISE,
		COUNTER_CLOCKWISE
	}
	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_WINSYS_FEATURE_", type_id = "cogl_winsys_feature_get_type ()")]
	public enum WinsysFeature {
		MULTIPLE_ONSCREEN,
		SWAP_THROTTLE,
		VBLANK_COUNTER,
		VBLANK_WAIT,
		TEXTURE_FROM_PIXMAP,
		SWAP_BUFFERS_EVENT,
		SWAP_REGION,
		SWAP_REGION_THROTTLE,
		SWAP_REGION_SYNCHRONIZED,
		BUFFER_AGE,
		SYNC_AND_COMPLETE_EVENT,
		N_FEATURES
	}
	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_WINSYS_ID_", has_type_id = false)]
	public enum WinsysID {
		ANY,
		STUB,
		GLX,
		EGL_XLIB,
		EGL_NULL,
		EGL_GDL,
		EGL_WAYLAND,
		EGL_KMS,
		EGL_ANDROID,
		WGL,
		SDL
	}
	[CCode (cheader_filename = "cogl/cogl.h", instance_pos = 1.9)]
	public delegate void DebugObjectForeachTypeCallback (Cogl.DebugObjectTypeInfo info);
	[CCode (cheader_filename = "cogl/cogl.h", instance_pos = 1.9)]
	public delegate void FeatureCallback (Cogl.FeatureID feature);
	[CCode (cheader_filename = "cogl/cogl.h", instance_pos = 1.9)]
	public delegate void FenceCallback (Cogl.Fence fence);
	[CCode (cheader_filename = "cogl/cogl.h", instance_pos = 3.9)]
	public delegate void FrameCallback (Cogl.Onscreen onscreen, Cogl.FrameEvent event, Cogl.FrameInfo info);
	[CCode (cheader_filename = "cogl/cogl.h", has_target = false)]
	public delegate void FuncPtr ();
	[CCode (cheader_filename = "cogl/cogl.h", instance_pos = 3.9)]
	public delegate void MetaTextureCallback (Cogl.Texture sub_texture, float sub_texture_coords, float meta_coords);
	[CCode (cheader_filename = "cogl/cogl.h", instance_pos = 2.9)]
	public delegate void OnscreenDirtyCallback (Cogl.Onscreen onscreen, Cogl.OnscreenDirtyInfo info);
	[CCode (cheader_filename = "cogl/cogl.h", instance_pos = 3.9)]
	public delegate void OnscreenResizeCallback (Cogl.Onscreen onscreen, int width, int height);
	[CCode (cheader_filename = "cogl/cogl.h", instance_pos = 2.9)]
	public delegate void OnscreenX11MaskCallback (Cogl.Onscreen onscreen, uint32 event_mask);
	[CCode (cheader_filename = "cogl/cogl.h", instance_pos = 1.9)]
	public delegate void OutputCallback (Cogl.Output output);
	[CCode (cheader_filename = "cogl/cogl.h", instance_pos = 2.9)]
	public delegate Cogl.Bool PipelineLayerCallback (Cogl.Pipeline pipeline, int layer_index);
	[CCode (cheader_filename = "cogl/cogl.h", instance_pos = 2.9)]
	public delegate Cogl.Bool PrimitiveAttributeCallback (Cogl.Primitive primitive, Cogl.Attribute attribute);
	[CCode (cheader_filename = "cogl/cogl.h", instance_pos = 1.9)]
	public delegate void SwapBuffersNotify (Cogl.Framebuffer framebuffer);
	[CCode (cheader_filename = "cogl/cogl.h", has_target = false)]
	public delegate void UserDataDestroyCallback (void* data);
	[CCode (cheader_filename = "cogl/cogl.h", cname = "COGL_AFIRST_BIT")]
	public const int AFIRST_BIT;
	[CCode (cheader_filename = "cogl/cogl.h", cname = "COGL_A_BIT")]
	public const int A_BIT;
	[CCode (cheader_filename = "cogl/cogl.h", cname = "COGL_BGR_BIT")]
	public const int BGR_BIT;
	[CCode (cheader_filename = "cogl/cogl.h", cname = "COGL_DEPTH_BIT")]
	public const int DEPTH_BIT;
	[CCode (cheader_filename = "cogl/cogl.h", cname = "COGL_PREMULT_BIT")]
	public const int PREMULT_BIT;
	[CCode (cheader_filename = "cogl/cogl.h", cname = "COGL_STENCIL_BIT")]
	public const int STENCIL_BIT;
	[CCode (cheader_filename = "cogl/cogl.h", cname = "COGL_TEXTURE_MAX_WASTE")]
	public const int TEXTURE_MAX_WASTE;
	[CCode (cheader_filename = "cogl/cogl.h", cname = "COGL_VERSION_COMPONENT_BITS")]
	public const int VERSION_COMPONENT_BITS;
	[CCode (cheader_filename = "cogl/cogl.h", cname = "COGL_VERSION_MAX_COMPONENT_VALUE")]
	public const int VERSION_MAX_COMPONENT_VALUE;
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static void debug_matrix_entry_print (Cogl.MatrixEntry entry);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static void debug_matrix_print (Cogl.Matrix matrix);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static void debug_object_foreach_type (Cogl.DebugObjectForeachTypeCallback func);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static void debug_object_print_instances ();
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static GLib.Error error_copy (GLib.Error error);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static void error_free (GLib.Error error);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static Cogl.Bool error_matches (GLib.Error error, uint32 domain, int code);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static void foreach_feature (Cogl.Context context, Cogl.FeatureCallback callback);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static int64 get_clock_time (Cogl.Context context);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static unowned Cogl.Framebuffer get_draw_framebuffer ();
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static unowned Cogl.Quaternion get_static_identity_quaternion ();
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static unowned Cogl.Quaternion get_static_zero_quaternion ();
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static Cogl.Bool gles2_texture_get_handle (Cogl.Texture texture, uint handle, uint target);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static GLib.Source glib_renderer_source_new (Cogl.Renderer renderer, int priority);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static GLib.Source glib_source_new (Cogl.Context context, int priority);
	[CCode (cheader_filename = "cogl/cogl.h")]
	[Deprecated (since = "1.18")]
	public static GLib.Type gtype_matrix_get_type ();
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static Cogl.Bool has_feature (Cogl.Context context, Cogl.FeatureID feature);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static Cogl.Bool is_atlas_texture (void* object);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static Cogl.Bool is_attribute (void* object);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static Cogl.Bool is_attribute_buffer (void* object);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static Cogl.Bool is_bitmap (void* object);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static Cogl.Bool is_buffer (void* object);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static Cogl.Bool is_context (void* object);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static Cogl.Bool is_display (void* object);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static Cogl.Bool is_frame_info (void* object);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static Cogl.Bool is_framebuffer (void* object);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static Cogl.Bool is_gles2_context (void* object);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static Cogl.Bool is_index_buffer (void* object);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static Cogl.Bool is_indices (void* object);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static Cogl.Bool is_matrix_stack (void* object);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static Cogl.Bool is_onscreen (void* object);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static Cogl.Bool is_onscreen_template (void* object);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static Cogl.Bool is_output (void* object);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static Cogl.Bool is_pipeline (void* object);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static Cogl.Bool is_pixel_buffer (void* object);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static Cogl.Bool is_primitive (void* object);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static Cogl.Bool is_primitive_texture (void* object);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static Cogl.Bool is_renderer (void* object);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static Cogl.Bool is_snippet (void* object);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static Cogl.Bool is_sub_texture (void* object);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static Cogl.Bool is_swap_chain (void* object);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static Cogl.Bool is_texture (void* object);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static Cogl.Bool is_texture_2d (void* object);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static Cogl.Bool is_texture_2d_sliced (void* object);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static Cogl.Bool is_texture_3d (void* object);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static Cogl.Bool is_texture_pixmap_x11 (void* object);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static Cogl.Bool is_texture_rectangle (void* object);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static void kms_display_queue_modes_reset (Cogl.Display display);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static void kms_display_set_ignore_crtc (Cogl.Display display, uint32 id, Cogl.Bool ignore);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static Cogl.Bool kms_display_set_layout (Cogl.Display display, int width, int height, Cogl.KmsCrtc crtcs, int n_crtcs) throws GLib.Error;
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static int kms_renderer_get_kms_fd (Cogl.Renderer renderer);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static void kms_renderer_set_kms_fd (Cogl.Renderer renderer, int fd);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static void poll_renderer_dispatch (Cogl.Renderer renderer, Cogl.PollFD poll_fds, int n_poll_fds);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static int poll_renderer_get_info (Cogl.Renderer renderer, Cogl.PollFD poll_fds, int n_poll_fds, int64 timeout);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static void pop_gles2_context (Cogl.Context ctx);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static Cogl.Bool push_gles2_context (Cogl.Context ctx, Cogl.GLES2Context gles2_ctx, Cogl.Framebuffer read_buffer, Cogl.Framebuffer write_buffer) throws GLib.Error;
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static void vector3_add (float result, float a, float b);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static float vector3_copy (float vector);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static void vector3_cross_product (float result, float u, float v);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static float vector3_distance (float a, float b);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static void vector3_divide_scalar (float vector, float scalar);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static float vector3_dot_product (float a, float b);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static Cogl.Bool vector3_equal (void* v1, void* v2);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static Cogl.Bool vector3_equal_with_epsilon (float vector0, float vector1, float epsilon);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static void vector3_free (float vector);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static void vector3_init (float vector, float x, float y, float z);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static void vector3_init_zero (float vector);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static void vector3_invert (float vector);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static float vector3_magnitude (float vector);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static void vector3_multiply_scalar (float vector, float scalar);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static void vector3_normalize (float vector);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static void vector3_subtract (float result, float a, float b);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static void wayland_display_set_compositor_display (Cogl.Display display, void* wayland_display);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static void wayland_onscreen_resize (Cogl.Onscreen onscreen, int width, int height, int offset_x, int offset_y);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static void wayland_onscreen_set_foreign_surface (Cogl.Onscreen onscreen, void* surface);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static void wayland_renderer_set_event_dispatch_enabled (Cogl.Renderer renderer, Cogl.Bool enable);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static void wayland_renderer_set_foreign_display (Cogl.Renderer renderer, void* display);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static Cogl.Bool wayland_texture_set_region_from_shm_buffer (Cogl.Texture texture, int src_x, int src_y, int width, int height, void* shm_buffer, int dst_x, int dst_y, int level) throws GLib.Error;
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static uint32 x11_onscreen_get_visual_xid (Cogl.Onscreen onscreen);
	[CCode (cheader_filename = "cogl/cogl.h")]
	public static uint32 x11_onscreen_get_window_xid (Cogl.Onscreen onscreen);
}
